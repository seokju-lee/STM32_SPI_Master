
spi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005010  08005010  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005010  08005010  00015010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005018  08005018  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b90  20000010  08005030  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba0  08005030  00024ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a94  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4b  00000000  00000000  00031ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00035500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003968  00000000  00000000  000362b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105f7  00000000  00000000  00039c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2bbe  00000000  00000000  0004a217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cdd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd8  00000000  00000000  0011ce28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f70 	.word	0x08004f70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004f70 	.word	0x08004f70

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb60 	bl	8000bdc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82a 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8d2 	bl	80006c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000524:	f000 f898 	bl	8000658 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_SPI_Init(&hspi1) != HAL_OK){};
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x44>)
 800052a:	f001 fc61 	bl	8001df0 <HAL_SPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052e:	f001 ff97 	bl	8002460 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <main+0x48>)
 8000534:	2100      	movs	r1, #0
 8000536:	480a      	ldr	r0, [pc, #40]	; (8000560 <main+0x4c>)
 8000538:	f001 ffdc 	bl	80024f4 <osThreadNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a09      	ldr	r2, [pc, #36]	; (8000564 <main+0x50>)
 8000540:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <main+0x54>)
 8000544:	2100      	movs	r1, #0
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <main+0x58>)
 8000548:	f001 ffd4 	bl	80024f4 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <main+0x5c>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f001 ffa9 	bl	80024a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x42>
 8000558:	2000002c 	.word	0x2000002c
 800055c:	08004fb8 	.word	0x08004fb8
 8000560:	08000955 	.word	0x08000955
 8000564:	20000084 	.word	0x20000084
 8000568:	08004fdc 	.word	0x08004fdc
 800056c:	08000a19 	.word	0x08000a19
 8000570:	20000088 	.word	0x20000088

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fcec 	bl	8004f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <SystemClock_Config+0xdc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <SystemClock_Config+0xdc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <SystemClock_Config+0xdc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <SystemClock_Config+0xe0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a25      	ldr	r2, [pc, #148]	; (8000654 <SystemClock_Config+0xe0>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <SystemClock_Config+0xe0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e4:	2308      	movs	r3, #8
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005e8:	23b4      	movs	r3, #180	; 0xb4
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f959 	bl	80018b4 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000608:	f000 fa0e 	bl	8000a28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800060c:	f000 fdec 	bl	80011e8 <HAL_PWREx_EnableOverDrive>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000616:	f000 fa07 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2105      	movs	r1, #5
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fe25 	bl	8001288 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000644:	f000 f9f0 	bl	8000a28 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	; 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_SPI1_Init+0x68>)
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <MX_SPI1_Init+0x6c>)
 8000660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_SPI1_Init+0x68>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000676:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_SPI1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000686:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800068a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_SPI1_Init+0x68>)
 800068e:	2210      	movs	r2, #16
 8000690:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_SPI1_Init+0x68>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_SPI1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_SPI1_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_SPI1_Init+0x68>)
 80006a6:	220a      	movs	r2, #10
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_SPI1_Init+0x68>)
 80006ac:	f001 fba0 	bl	8001df0 <HAL_SPI_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006b6:	f000 f9b7 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000002c 	.word	0x2000002c
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2110      	movs	r1, #16
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <MX_GPIO_Init+0xd4>)
 8000754:	f000 fd2e 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_GPIO_Init+0xd8>)
 8000770:	f000 fb8c 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000774:	2310      	movs	r3, #16
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0xd4>)
 800078c:	f000 fb7e 	bl	8000e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020800 	.word	0x40020800

080007a4 <spiTransmitReceiveData>:

/* USER CODE BEGIN 4 */
void spiTransmitReceiveData(unsigned char* T_data, unsigned char* R_data){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2110      	movs	r1, #16
 80007b2:	481e      	ldr	r0, [pc, #120]	; (800082c <spiTransmitReceiveData+0x88>)
 80007b4:	f000 fcfe 	bl	80011b4 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX_RX);
 80007b8:	bf00      	nop
 80007ba:	481d      	ldr	r0, [pc, #116]	; (8000830 <spiTransmitReceiveData+0x8c>)
 80007bc:	f001 fd43 	bl	8002246 <HAL_SPI_GetState>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b05      	cmp	r3, #5
 80007c4:	d0f9      	beq.n	80007ba <spiTransmitReceiveData+0x16>

	if(HAL_SPI_TransmitReceive(&hspi1, T_data, R_data, 66, 10000) != HAL_OK){
 80007c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2342      	movs	r3, #66	; 0x42
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4817      	ldr	r0, [pc, #92]	; (8000830 <spiTransmitReceiveData+0x8c>)
 80007d4:	f001 fb95 	bl	8001f02 <HAL_SPI_TransmitReceive>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <spiTransmitReceiveData+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <spiTransmitReceiveData+0x88>)
 80007e4:	f000 fce6 	bl	80011b4 <HAL_GPIO_WritePin>
	}

	for(int k = 0; k < 66; k++){
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e00b      	b.n	8000806 <spiTransmitReceiveData+0x62>
		R_buffer[k] = R_data[k];
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b299      	uxth	r1, r3
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <spiTransmitReceiveData+0x90>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int k = 0; k < 66; k++){
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b41      	cmp	r3, #65	; 0x41
 800080a:	ddf0      	ble.n	80007ee <spiTransmitReceiveData+0x4a>
	}

	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX_RX);
 800080c:	bf00      	nop
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <spiTransmitReceiveData+0x8c>)
 8000810:	f001 fd19 	bl	8002246 <HAL_SPI_GetState>
 8000814:	4603      	mov	r3, r0
 8000816:	2b05      	cmp	r3, #5
 8000818:	d0f9      	beq.n	800080e <spiTransmitReceiveData+0x6a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2110      	movs	r1, #16
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <spiTransmitReceiveData+0x88>)
 8000820:	f000 fcc8 	bl	80011b4 <HAL_GPIO_WritePin>
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020000 	.word	0x40020000
 8000830:	2000002c 	.word	0x2000002c
 8000834:	20000194 	.word	0x20000194

08000838 <float_for_spi>:
//		angle -= 2*pi;
//	}
//	return angle;
//}

void float_for_spi(ftu a, int i){
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	for (int j = 0; j < 2; j ++){
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	e00e      	b.n	8000866 <float_for_spi+0x2e>
		T_buffer[i+j] = a.buffer[j];
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	441a      	add	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	3310      	adds	r3, #16
 8000854:	443b      	add	r3, r7
 8000856:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <float_for_spi+0x44>)
 800085c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int j = 0; j < 2; j ++){
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3301      	adds	r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b01      	cmp	r3, #1
 800086a:	dded      	ble.n	8000848 <float_for_spi+0x10>
	}
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	2000008c 	.word	0x2000008c

08000880 <spicommand>:

void spicommand(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	float_for_spi(tar_qa, 0);
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <spicommand+0xa0>)
 8000886:	2100      	movs	r1, #0
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f7ff ffd5 	bl	8000838 <float_for_spi>
	float_for_spi(tar_qh, 4);
 800088e:	4b25      	ldr	r3, [pc, #148]	; (8000924 <spicommand+0xa4>)
 8000890:	2104      	movs	r1, #4
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	f7ff ffd0 	bl	8000838 <float_for_spi>
	float_for_spi(tar_qk, 8);
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <spicommand+0xa8>)
 800089a:	2108      	movs	r1, #8
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f7ff ffcb 	bl	8000838 <float_for_spi>

	float_for_spi(tar_qd_, 12);
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <spicommand+0xac>)
 80008a4:	210c      	movs	r1, #12
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	f7ff ffc6 	bl	8000838 <float_for_spi>
	float_for_spi(tar_qd_, 16);
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <spicommand+0xac>)
 80008ae:	2110      	movs	r1, #16
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f7ff ffc1 	bl	8000838 <float_for_spi>
	float_for_spi(tar_qd_, 20);
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <spicommand+0xac>)
 80008b8:	2114      	movs	r1, #20
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	f7ff ffbc 	bl	8000838 <float_for_spi>

	float_for_spi(kpa, 24);
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <spicommand+0xb0>)
 80008c2:	2118      	movs	r1, #24
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	f7ff ffb7 	bl	8000838 <float_for_spi>
	float_for_spi(kph, 28);
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <spicommand+0xb4>)
 80008cc:	211c      	movs	r1, #28
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	f7ff ffb2 	bl	8000838 <float_for_spi>
	float_for_spi(kpk, 32);
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <spicommand+0xb8>)
 80008d6:	2120      	movs	r1, #32
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	f7ff ffad 	bl	8000838 <float_for_spi>

	float_for_spi(kda, 36);
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <spicommand+0xbc>)
 80008e0:	2124      	movs	r1, #36	; 0x24
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	f7ff ffa8 	bl	8000838 <float_for_spi>
	float_for_spi(kdh, 40);
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <spicommand+0xc0>)
 80008ea:	2128      	movs	r1, #40	; 0x28
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	f7ff ffa3 	bl	8000838 <float_for_spi>
	float_for_spi(kdk, 44);
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <spicommand+0xc4>)
 80008f4:	212c      	movs	r1, #44	; 0x2c
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	f7ff ff9e 	bl	8000838 <float_for_spi>

	float_for_spi(tau_ff_a, 48);
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <spicommand+0xc8>)
 80008fe:	2130      	movs	r1, #48	; 0x30
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	f7ff ff99 	bl	8000838 <float_for_spi>
	float_for_spi(tau_ff_h, 52);
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <spicommand+0xcc>)
 8000908:	2134      	movs	r1, #52	; 0x34
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	f7ff ff94 	bl	8000838 <float_for_spi>
	float_for_spi(tau_ff_k, 56);
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <spicommand+0xd0>)
 8000912:	2138      	movs	r1, #56	; 0x38
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	f7ff ff8f 	bl	8000838 <float_for_spi>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000218 	.word	0x20000218
 8000924:	2000021c 	.word	0x2000021c
 8000928:	20000220 	.word	0x20000220
 800092c:	20000224 	.word	0x20000224
 8000930:	20000234 	.word	0x20000234
 8000934:	20000238 	.word	0x20000238
 8000938:	2000023c 	.word	0x2000023c
 800093c:	20000240 	.word	0x20000240
 8000940:	20000244 	.word	0x20000244
 8000944:	20000248 	.word	0x20000248
 8000948:	20000228 	.word	0x20000228
 800094c:	2000022c 	.word	0x2000022c
 8000950:	20000230 	.word	0x20000230

08000954 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  tar_qa.data = 0;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <StartDefaultTask+0x78>)
 800095e:	f04f 0200 	mov.w	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
  tar_qh.data = 0;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <StartDefaultTask+0x7c>)
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
  tar_qk.data = 0;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <StartDefaultTask+0x80>)
 800096e:	f04f 0200 	mov.w	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
  tar_qd_.data = 0;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <StartDefaultTask+0x84>)
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
  tau_ff_a.data = 0;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <StartDefaultTask+0x88>)
 800097e:	f04f 0200 	mov.w	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
  tau_ff_h.data = 0;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <StartDefaultTask+0x8c>)
 8000986:	f04f 0200 	mov.w	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
  tau_ff_k.data = 0;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <StartDefaultTask+0x90>)
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
  kpa.data = 700;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <StartDefaultTask+0x94>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <StartDefaultTask+0x98>)
 8000998:	601a      	str	r2, [r3, #0]
  kda.data = 70;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <StartDefaultTask+0x9c>)
 800099c:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <StartDefaultTask+0xa0>)
 800099e:	601a      	str	r2, [r3, #0]
  kph.data = 1000;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <StartDefaultTask+0xa4>)
 80009a2:	4a16      	ldr	r2, [pc, #88]	; (80009fc <StartDefaultTask+0xa8>)
 80009a4:	601a      	str	r2, [r3, #0]
  kdh.data = 80;
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <StartDefaultTask+0xac>)
 80009a8:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <StartDefaultTask+0xb0>)
 80009aa:	601a      	str	r2, [r3, #0]
  kpk.data = 1000;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <StartDefaultTask+0xb4>)
 80009ae:	4a13      	ldr	r2, [pc, #76]	; (80009fc <StartDefaultTask+0xa8>)
 80009b0:	601a      	str	r2, [r3, #0]
  kdk.data = 80;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <StartDefaultTask+0xb8>)
 80009b4:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <StartDefaultTask+0xb0>)
 80009b6:	601a      	str	r2, [r3, #0]
  for(;;)
  {
	spiTransmitReceiveData(T_buffer, Rx_buffer);
 80009b8:	4915      	ldr	r1, [pc, #84]	; (8000a10 <StartDefaultTask+0xbc>)
 80009ba:	4816      	ldr	r0, [pc, #88]	; (8000a14 <StartDefaultTask+0xc0>)
 80009bc:	f7ff fef2 	bl	80007a4 <spiTransmitReceiveData>
//
//	tar_qa.data = (float) tar_q1;
//	tar_qh.data = (float) tar_q2;
//	tar_qk.data = (float) tar_q3;

	spicommand();
 80009c0:	f7ff ff5e 	bl	8000880 <spicommand>
    osDelay(2);
 80009c4:	2002      	movs	r0, #2
 80009c6:	f001 fe27 	bl	8002618 <osDelay>
	spiTransmitReceiveData(T_buffer, Rx_buffer);
 80009ca:	e7f5      	b.n	80009b8 <StartDefaultTask+0x64>
 80009cc:	20000218 	.word	0x20000218
 80009d0:	2000021c 	.word	0x2000021c
 80009d4:	20000220 	.word	0x20000220
 80009d8:	20000224 	.word	0x20000224
 80009dc:	20000228 	.word	0x20000228
 80009e0:	2000022c 	.word	0x2000022c
 80009e4:	20000230 	.word	0x20000230
 80009e8:	20000234 	.word	0x20000234
 80009ec:	442f0000 	.word	0x442f0000
 80009f0:	20000240 	.word	0x20000240
 80009f4:	428c0000 	.word	0x428c0000
 80009f8:	20000238 	.word	0x20000238
 80009fc:	447a0000 	.word	0x447a0000
 8000a00:	20000244 	.word	0x20000244
 8000a04:	42a00000 	.word	0x42a00000
 8000a08:	2000023c 	.word	0x2000023c
 8000a0c:	20000248 	.word	0x20000248
 8000a10:	20000110 	.word	0x20000110
 8000a14:	2000008c 	.word	0x2000008c

08000a18 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2);
 8000a20:	2002      	movs	r0, #2
 8000a22:	f001 fdf9 	bl	8002618 <osDelay>
 8000a26:	e7fb      	b.n	8000a20 <StartTask02+0x8>

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_MspInit+0x54>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <HAL_MspInit+0x54>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x54>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_MspInit+0x54>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_MspInit+0x54>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_MspInit+0x54>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	210f      	movs	r1, #15
 8000a76:	f06f 0001 	mvn.w	r0, #1
 8000a7a:	f000 f9de 	bl	8000e3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <HAL_SPI_MspInit+0x84>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12c      	bne.n	8000b08 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_SPI_MspInit+0x88>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_SPI_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8000ae6:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af8:	2305      	movs	r3, #5
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000b04:	f000 f9c2 	bl	8000e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40013000 	.word	0x40013000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f898 	bl	8000c80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b50:	f003 f970 	bl	8003e34 <xTaskGetSchedulerState>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d001      	beq.n	8000b5e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b5a:	f003 ff55 	bl	8004a08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ffd7 	bl	8000b64 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f004 f9a1 	bl	8004efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fcab 	bl	8000514 <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bcc:	08005020 	.word	0x08005020
  ldr r2, =_sbss
 8000bd0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bd4:	20004ba0 	.word	0x20004ba0

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_Init+0x40>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_Init+0x40>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x40>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f90d 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff ff10 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f917 	bl	8000e72 <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f8ed 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	2000024c 	.word	0x2000024c

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000024c 	.word	0x2000024c

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff47 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff5c 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffb0 	bl	8000de0 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	e165      	b.n	8001174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 8154 	bne.w	800116e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d005      	beq.n	8000ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d130      	bne.n	8000f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 0201 	and.w	r2, r3, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d017      	beq.n	8000f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d123      	bne.n	8000fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0203 	and.w	r2, r3, #3
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80ae 	beq.w	800116e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <HAL_GPIO_Init+0x300>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a5c      	ldr	r2, [pc, #368]	; (800118c <HAL_GPIO_Init+0x300>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b5a      	ldr	r3, [pc, #360]	; (800118c <HAL_GPIO_Init+0x300>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102e:	4a58      	ldr	r2, [pc, #352]	; (8001190 <HAL_GPIO_Init+0x304>)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4f      	ldr	r2, [pc, #316]	; (8001194 <HAL_GPIO_Init+0x308>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d025      	beq.n	80010a6 <HAL_GPIO_Init+0x21a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <HAL_GPIO_Init+0x30c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d01f      	beq.n	80010a2 <HAL_GPIO_Init+0x216>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4d      	ldr	r2, [pc, #308]	; (800119c <HAL_GPIO_Init+0x310>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x212>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_GPIO_Init+0x314>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x20e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4b      	ldr	r2, [pc, #300]	; (80011a4 <HAL_GPIO_Init+0x318>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x20a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4a      	ldr	r2, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x31c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x206>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a49      	ldr	r2, [pc, #292]	; (80011ac <HAL_GPIO_Init+0x320>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x202>
 800108a:	2306      	movs	r3, #6
 800108c:	e00c      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 800108e:	2307      	movs	r3, #7
 8001090:	e00a      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 8001092:	2305      	movs	r3, #5
 8001094:	e008      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 8001096:	2304      	movs	r3, #4
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 800109a:	2303      	movs	r3, #3
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 80010a6:	2300      	movs	r3, #0
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	f002 0203 	and.w	r2, r2, #3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b8:	4935      	ldr	r1, [pc, #212]	; (8001190 <HAL_GPIO_Init+0x304>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <HAL_GPIO_Init+0x324>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <HAL_GPIO_Init+0x324>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x324>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_GPIO_Init+0x324>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_GPIO_Init+0x324>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3301      	adds	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	f67f ae96 	bls.w	8000ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40013800 	.word	0x40013800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021800 	.word	0x40021800
 80011b0:	40013c00 	.word	0x40013c00

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_PWREx_EnableOverDrive+0x90>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <HAL_PWREx_EnableOverDrive+0x90>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_PWREx_EnableOverDrive+0x90>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_PWREx_EnableOverDrive+0x94>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001214:	f7ff fd48 	bl	8000ca8 <HAL_GetTick>
 8001218:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800121a:	e009      	b.n	8001230 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800121c:	f7ff fd44 	bl	8000ca8 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800122a:	d901      	bls.n	8001230 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e01f      	b.n	8001270 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_PWREx_EnableOverDrive+0x98>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d1ee      	bne.n	800121c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001244:	f7ff fd30 	bl	8000ca8 <HAL_GetTick>
 8001248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800124a:	e009      	b.n	8001260 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800124c:	f7ff fd2c 	bl	8000ca8 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800125a:	d901      	bls.n	8001260 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e007      	b.n	8001270 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_PWREx_EnableOverDrive+0x98>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800126c:	d1ee      	bne.n	800124c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	420e0040 	.word	0x420e0040
 8001280:	40007000 	.word	0x40007000
 8001284:	420e0044 	.word	0x420e0044

08001288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0cc      	b.n	8001436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800129c:	4b68      	ldr	r3, [pc, #416]	; (8001440 <HAL_RCC_ClockConfig+0x1b8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d90c      	bls.n	80012c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b2:	4b63      	ldr	r3, [pc, #396]	; (8001440 <HAL_RCC_ClockConfig+0x1b8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0b8      	b.n	8001436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012dc:	4b59      	ldr	r3, [pc, #356]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a58      	ldr	r2, [pc, #352]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f4:	4b53      	ldr	r3, [pc, #332]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001300:	4b50      	ldr	r3, [pc, #320]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	494d      	ldr	r1, [pc, #308]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	4313      	orrs	r3, r2
 8001310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d044      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b47      	ldr	r3, [pc, #284]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d119      	bne.n	8001366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e07f      	b.n	8001436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d003      	beq.n	8001346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001342:	2b03      	cmp	r3, #3
 8001344:	d107      	bne.n	8001356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e06f      	b.n	8001436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e067      	b.n	8001436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f023 0203 	bic.w	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4934      	ldr	r1, [pc, #208]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 8001374:	4313      	orrs	r3, r2
 8001376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001378:	f7ff fc96 	bl	8000ca8 <HAL_GetTick>
 800137c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	e00a      	b.n	8001396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001380:	f7ff fc92 	bl	8000ca8 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f241 3288 	movw	r2, #5000	; 0x1388
 800138e:	4293      	cmp	r3, r2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e04f      	b.n	8001436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 020c 	and.w	r2, r3, #12
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d1eb      	bne.n	8001380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_RCC_ClockConfig+0x1b8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d20c      	bcs.n	80013d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_RCC_ClockConfig+0x1b8>)
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_RCC_ClockConfig+0x1b8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e032      	b.n	8001436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4916      	ldr	r1, [pc, #88]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	490e      	ldr	r1, [pc, #56]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	4313      	orrs	r3, r2
 800140c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800140e:	f000 f821 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 8001412:	4602      	mov	r2, r0
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	490a      	ldr	r1, [pc, #40]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	5ccb      	ldrb	r3, [r1, r3]
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_ClockConfig+0x1c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fbf6 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023c00 	.word	0x40023c00
 8001444:	40023800 	.word	0x40023800
 8001448:	08005000 	.word	0x08005000
 800144c:	20000000 	.word	0x20000000
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001458:	b0ae      	sub	sp, #184	; 0xb8
 800145a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147a:	4bcb      	ldr	r3, [pc, #812]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b0c      	cmp	r3, #12
 8001484:	f200 8206 	bhi.w	8001894 <HAL_RCC_GetSysClockFreq+0x440>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <HAL_RCC_GetSysClockFreq+0x3c>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014c5 	.word	0x080014c5
 8001494:	08001895 	.word	0x08001895
 8001498:	08001895 	.word	0x08001895
 800149c:	08001895 	.word	0x08001895
 80014a0:	080014cd 	.word	0x080014cd
 80014a4:	08001895 	.word	0x08001895
 80014a8:	08001895 	.word	0x08001895
 80014ac:	08001895 	.word	0x08001895
 80014b0:	080014d5 	.word	0x080014d5
 80014b4:	08001895 	.word	0x08001895
 80014b8:	08001895 	.word	0x08001895
 80014bc:	08001895 	.word	0x08001895
 80014c0:	080016c5 	.word	0x080016c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014c4:	4bb9      	ldr	r3, [pc, #740]	; (80017ac <HAL_RCC_GetSysClockFreq+0x358>)
 80014c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014ca:	e1e7      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014cc:	4bb8      	ldr	r3, [pc, #736]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014d2:	e1e3      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d4:	4bb4      	ldr	r3, [pc, #720]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e0:	4bb1      	ldr	r3, [pc, #708]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d071      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ec:	4bae      	ldr	r3, [pc, #696]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	2200      	movs	r2, #0
 80014f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800150e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001512:	4622      	mov	r2, r4
 8001514:	462b      	mov	r3, r5
 8001516:	f04f 0000 	mov.w	r0, #0
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	0159      	lsls	r1, r3, #5
 8001520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001524:	0150      	lsls	r0, r2, #5
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4621      	mov	r1, r4
 800152c:	1a51      	subs	r1, r2, r1
 800152e:	6439      	str	r1, [r7, #64]	; 0x40
 8001530:	4629      	mov	r1, r5
 8001532:	eb63 0301 	sbc.w	r3, r3, r1
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001544:	4649      	mov	r1, r9
 8001546:	018b      	lsls	r3, r1, #6
 8001548:	4641      	mov	r1, r8
 800154a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800154e:	4641      	mov	r1, r8
 8001550:	018a      	lsls	r2, r1, #6
 8001552:	4641      	mov	r1, r8
 8001554:	1a51      	subs	r1, r2, r1
 8001556:	63b9      	str	r1, [r7, #56]	; 0x38
 8001558:	4649      	mov	r1, r9
 800155a:	eb63 0301 	sbc.w	r3, r3, r1
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800156c:	4649      	mov	r1, r9
 800156e:	00cb      	lsls	r3, r1, #3
 8001570:	4641      	mov	r1, r8
 8001572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001576:	4641      	mov	r1, r8
 8001578:	00ca      	lsls	r2, r1, #3
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	4603      	mov	r3, r0
 8001580:	4622      	mov	r2, r4
 8001582:	189b      	adds	r3, r3, r2
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
 8001586:	462b      	mov	r3, r5
 8001588:	460a      	mov	r2, r1
 800158a:	eb42 0303 	adc.w	r3, r2, r3
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800159c:	4629      	mov	r1, r5
 800159e:	024b      	lsls	r3, r1, #9
 80015a0:	4621      	mov	r1, r4
 80015a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015a6:	4621      	mov	r1, r4
 80015a8:	024a      	lsls	r2, r1, #9
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015c0:	f7fe fe26 	bl	8000210 <__aeabi_uldivmod>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4613      	mov	r3, r2
 80015ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015ce:	e067      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d0:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80015ea:	2300      	movs	r3, #0
 80015ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015f2:	4622      	mov	r2, r4
 80015f4:	462b      	mov	r3, r5
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	0159      	lsls	r1, r3, #5
 8001600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001604:	0150      	lsls	r0, r2, #5
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4621      	mov	r1, r4
 800160c:	1a51      	subs	r1, r2, r1
 800160e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001610:	4629      	mov	r1, r5
 8001612:	eb63 0301 	sbc.w	r3, r3, r1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001624:	4649      	mov	r1, r9
 8001626:	018b      	lsls	r3, r1, #6
 8001628:	4641      	mov	r1, r8
 800162a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800162e:	4641      	mov	r1, r8
 8001630:	018a      	lsls	r2, r1, #6
 8001632:	4641      	mov	r1, r8
 8001634:	ebb2 0a01 	subs.w	sl, r2, r1
 8001638:	4649      	mov	r1, r9
 800163a:	eb63 0b01 	sbc.w	fp, r3, r1
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800164a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800164e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001652:	4692      	mov	sl, r2
 8001654:	469b      	mov	fp, r3
 8001656:	4623      	mov	r3, r4
 8001658:	eb1a 0303 	adds.w	r3, sl, r3
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	462b      	mov	r3, r5
 8001660:	eb4b 0303 	adc.w	r3, fp, r3
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001672:	4629      	mov	r1, r5
 8001674:	028b      	lsls	r3, r1, #10
 8001676:	4621      	mov	r1, r4
 8001678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800167c:	4621      	mov	r1, r4
 800167e:	028a      	lsls	r2, r1, #10
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001688:	2200      	movs	r2, #0
 800168a:	673b      	str	r3, [r7, #112]	; 0x70
 800168c:	677a      	str	r2, [r7, #116]	; 0x74
 800168e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001692:	f7fe fdbd 	bl	8000210 <__aeabi_uldivmod>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4613      	mov	r3, r2
 800169c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016a0:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	0c1b      	lsrs	r3, r3, #16
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	3301      	adds	r3, #1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016c2:	e0eb      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c4:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016d0:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d06b      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	2200      	movs	r2, #0
 80016e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80016e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ee:	663b      	str	r3, [r7, #96]	; 0x60
 80016f0:	2300      	movs	r3, #0
 80016f2:	667b      	str	r3, [r7, #100]	; 0x64
 80016f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016f8:	4622      	mov	r2, r4
 80016fa:	462b      	mov	r3, r5
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	0159      	lsls	r1, r3, #5
 8001706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170a:	0150      	lsls	r0, r2, #5
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4621      	mov	r1, r4
 8001712:	1a51      	subs	r1, r2, r1
 8001714:	61b9      	str	r1, [r7, #24]
 8001716:	4629      	mov	r1, r5
 8001718:	eb63 0301 	sbc.w	r3, r3, r1
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800172a:	4659      	mov	r1, fp
 800172c:	018b      	lsls	r3, r1, #6
 800172e:	4651      	mov	r1, sl
 8001730:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001734:	4651      	mov	r1, sl
 8001736:	018a      	lsls	r2, r1, #6
 8001738:	4651      	mov	r1, sl
 800173a:	ebb2 0801 	subs.w	r8, r2, r1
 800173e:	4659      	mov	r1, fp
 8001740:	eb63 0901 	sbc.w	r9, r3, r1
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001750:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001754:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001758:	4690      	mov	r8, r2
 800175a:	4699      	mov	r9, r3
 800175c:	4623      	mov	r3, r4
 800175e:	eb18 0303 	adds.w	r3, r8, r3
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	462b      	mov	r3, r5
 8001766:	eb49 0303 	adc.w	r3, r9, r3
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001778:	4629      	mov	r1, r5
 800177a:	024b      	lsls	r3, r1, #9
 800177c:	4621      	mov	r1, r4
 800177e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001782:	4621      	mov	r1, r4
 8001784:	024a      	lsls	r2, r1, #9
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178e:	2200      	movs	r2, #0
 8001790:	65bb      	str	r3, [r7, #88]	; 0x58
 8001792:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001794:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001798:	f7fe fd3a 	bl	8000210 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017a6:	e065      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x420>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	00f42400 	.word	0x00f42400
 80017b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b4:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_GetSysClockFreq+0x458>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	2200      	movs	r2, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	4611      	mov	r1, r2
 80017c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017c4:	653b      	str	r3, [r7, #80]	; 0x50
 80017c6:	2300      	movs	r3, #0
 80017c8:	657b      	str	r3, [r7, #84]	; 0x54
 80017ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017ce:	4642      	mov	r2, r8
 80017d0:	464b      	mov	r3, r9
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	0159      	lsls	r1, r3, #5
 80017dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e0:	0150      	lsls	r0, r2, #5
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4641      	mov	r1, r8
 80017e8:	1a51      	subs	r1, r2, r1
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	4649      	mov	r1, r9
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001800:	4659      	mov	r1, fp
 8001802:	018b      	lsls	r3, r1, #6
 8001804:	4651      	mov	r1, sl
 8001806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180a:	4651      	mov	r1, sl
 800180c:	018a      	lsls	r2, r1, #6
 800180e:	4651      	mov	r1, sl
 8001810:	1a54      	subs	r4, r2, r1
 8001812:	4659      	mov	r1, fp
 8001814:	eb63 0501 	sbc.w	r5, r3, r1
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	00eb      	lsls	r3, r5, #3
 8001822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001826:	00e2      	lsls	r2, r4, #3
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
 800182c:	4643      	mov	r3, r8
 800182e:	18e3      	adds	r3, r4, r3
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	464b      	mov	r3, r9
 8001834:	eb45 0303 	adc.w	r3, r5, r3
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001846:	4629      	mov	r1, r5
 8001848:	028b      	lsls	r3, r1, #10
 800184a:	4621      	mov	r1, r4
 800184c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001850:	4621      	mov	r1, r4
 8001852:	028a      	lsls	r2, r1, #10
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800185c:	2200      	movs	r2, #0
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001860:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001862:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001866:	f7fe fcd3 	bl	8000210 <__aeabi_uldivmod>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4613      	mov	r3, r2
 8001870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_RCC_GetSysClockFreq+0x458>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0f1b      	lsrs	r3, r3, #28
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001892:	e003      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800189a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	37b8      	adds	r7, #184	; 0xb8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400

080018b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e28d      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8083 	beq.w	80019da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d4:	4b94      	ldr	r3, [pc, #592]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d019      	beq.n	8001914 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018e0:	4b91      	ldr	r3, [pc, #580]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ec:	4b8e      	ldr	r3, [pc, #568]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f8:	d00c      	beq.n	8001914 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	4b8b      	ldr	r3, [pc, #556]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d112      	bne.n	800192c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b88      	ldr	r3, [pc, #544]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001912:	d10b      	bne.n	800192c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d05b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x124>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d157      	bne.n	80019d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e25a      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d106      	bne.n	8001944 <HAL_RCC_OscConfig+0x90>
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7b      	ldr	r2, [pc, #492]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e01d      	b.n	8001980 <HAL_RCC_OscConfig+0xcc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0xb4>
 800194e:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a75      	ldr	r2, [pc, #468]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a72      	ldr	r2, [pc, #456]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0xcc>
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a6e      	ldr	r2, [pc, #440]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800196e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6b      	ldr	r2, [pc, #428]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f98e 	bl	8000ca8 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f98a 	bl	8000ca8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e21f      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0xdc>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f97a 	bl	8000ca8 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff f976 	bl	8000ca8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e20b      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x104>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06f      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d017      	beq.n	8001a22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019f2:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fe:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d11c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a16:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d116      	bne.n	8001a50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x186>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e1d3      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	e03a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_OscConfig+0x278>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f923 	bl	8000ca8 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff f91f 	bl	8000ca8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1b4      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4925      	ldr	r1, [pc, #148]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x278>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f902 	bl	8000ca8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f8fe 	bl	8000ca8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e193      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d036      	beq.n	8001b40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d016      	beq.n	8001b08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f8e2 	bl	8000ca8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff f8de 	bl	8000ca8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e173      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x234>
 8001b06:	e01b      	b.n	8001b40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_OscConfig+0x27c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f8cb 	bl	8000ca8 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	e00e      	b.n	8001b34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff f8c7 	bl	8000ca8 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d907      	bls.n	8001b34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e15c      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	42470000 	.word	0x42470000
 8001b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	4b8a      	ldr	r3, [pc, #552]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ea      	bne.n	8001b16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8097 	beq.w	8001c7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b52:	4b83      	ldr	r3, [pc, #524]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10f      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a7e      	ldr	r2, [pc, #504]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_RCC_OscConfig+0x4b0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x4b0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a75      	ldr	r2, [pc, #468]	; (8001d64 <HAL_RCC_OscConfig+0x4b0>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b96:	f7ff f887 	bl	8000ca8 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7ff f883 	bl	8000ca8 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e118      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <HAL_RCC_OscConfig+0x4b0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x31e>
 8001bc4:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x358>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x340>
 8001bda:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a60      	ldr	r2, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	4a5d      	ldr	r2, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0x358>
 8001bf4:	4b5a      	ldr	r3, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a59      	ldr	r2, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	f023 0304 	bic.w	r3, r3, #4
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d015      	beq.n	8001c40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff f848 	bl	8000ca8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f844 	bl	8000ca8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0d7      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0ee      	beq.n	8001c1c <HAL_RCC_OscConfig+0x368>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7ff f832 	bl	8000ca8 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7ff f82e 	bl	8000ca8 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0c1      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ee      	bne.n	8001c48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	4a3a      	ldr	r2, [pc, #232]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80ad 	beq.w	8001de0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c86:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d060      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d145      	bne.n	8001d26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x4b4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f802 	bl	8000ca8 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe fffe 	bl	8000ca8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e093      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	071b      	lsls	r3, r3, #28
 8001cf2:	491b      	ldr	r1, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x4b4>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7fe ffd3 	bl	8000ca8 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe ffcf 	bl	8000ca8 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e064      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x452>
 8001d24:	e05c      	b.n	8001de0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_OscConfig+0x4b4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ffbc 	bl	8000ca8 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe ffb8 	bl	8000ca8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e04d      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x480>
 8001d52:	e045      	b.n	8001de0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e040      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000
 8001d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_RCC_OscConfig+0x538>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d030      	beq.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d129      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d122      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d119      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	3b01      	subs	r3, #1
 8001db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10f      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e07b      	b.n	8001efa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e12:	d009      	beq.n	8001e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
 8001e1a:	e005      	b.n	8001e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fe22 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eac:	ea42 0103 	orr.w	r1, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	f003 0104 	and.w	r1, r3, #4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	f003 0210 	and.w	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b08c      	sub	sp, #48	; 0x30
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f10:	2301      	movs	r3, #1
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_SPI_TransmitReceive+0x26>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e18a      	b.n	800223e <HAL_SPI_TransmitReceive+0x33c>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f30:	f7fe feba 	bl	8000ca8 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d00f      	beq.n	8001f72 <HAL_SPI_TransmitReceive+0x70>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f58:	d107      	bne.n	8001f6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_SPI_TransmitReceive+0x68>
 8001f62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d003      	beq.n	8001f72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f70:	e15b      	b.n	800222a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x82>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x82>
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f8a:	e14e      	b.n	800222a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d003      	beq.n	8001fa0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2205      	movs	r2, #5
 8001f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	887a      	ldrh	r2, [r7, #2]
 8001fb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	887a      	ldrh	r2, [r7, #2]
 8001fc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d007      	beq.n	8001ff4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ffc:	d178      	bne.n	80020f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_SPI_TransmitReceive+0x10a>
 8002006:	8b7b      	ldrh	r3, [r7, #26]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d166      	bne.n	80020da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	1c9a      	adds	r2, r3, #2
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002030:	e053      	b.n	80020da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d11b      	bne.n	8002078 <HAL_SPI_TransmitReceive+0x176>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_SPI_TransmitReceive+0x176>
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	2b01      	cmp	r3, #1
 800204e:	d113      	bne.n	8002078 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	1c9a      	adds	r2, r3, #2
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d119      	bne.n	80020ba <HAL_SPI_TransmitReceive+0x1b8>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d014      	beq.n	80020ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	b292      	uxth	r2, r2
 800209c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	1c9a      	adds	r2, r3, #2
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020b6:	2301      	movs	r3, #1
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020ba:	f7fe fdf5 	bl	8000ca8 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d807      	bhi.n	80020da <HAL_SPI_TransmitReceive+0x1d8>
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d003      	beq.n	80020da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020d8:	e0a7      	b.n	800222a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1a6      	bne.n	8002032 <HAL_SPI_TransmitReceive+0x130>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1a1      	bne.n	8002032 <HAL_SPI_TransmitReceive+0x130>
 80020ee:	e07c      	b.n	80021ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_SPI_TransmitReceive+0x1fc>
 80020f8:	8b7b      	ldrh	r3, [r7, #26]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d16b      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	330c      	adds	r3, #12
 8002108:	7812      	ldrb	r2, [r2, #0]
 800210a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002124:	e057      	b.n	80021d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d11c      	bne.n	800216e <HAL_SPI_TransmitReceive+0x26c>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d017      	beq.n	800216e <HAL_SPI_TransmitReceive+0x26c>
 800213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d114      	bne.n	800216e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	330c      	adds	r3, #12
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d119      	bne.n	80021b0 <HAL_SPI_TransmitReceive+0x2ae>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d014      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021ac:	2301      	movs	r3, #1
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021b0:	f7fe fd7a 	bl	8000ca8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021bc:	429a      	cmp	r2, r3
 80021be:	d803      	bhi.n	80021c8 <HAL_SPI_TransmitReceive+0x2c6>
 80021c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d102      	bne.n	80021ce <HAL_SPI_TransmitReceive+0x2cc>
 80021c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021d4:	e029      	b.n	800222a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1a2      	bne.n	8002126 <HAL_SPI_TransmitReceive+0x224>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d19d      	bne.n	8002126 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f8c0 	bl	8002374 <SPI_EndRxTxTransaction>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002206:	e010      	b.n	800222a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	e000      	b.n	800222a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002228:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800223a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800223e:	4618      	mov	r0, r3
 8002240:	3730      	adds	r7, #48	; 0x30
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002254:	b2db      	uxtb	r3, r3
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002274:	f7fe fd18 	bl	8000ca8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002284:	f7fe fd10 	bl	8000ca8 <HAL_GetTick>
 8002288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800228a:	4b39      	ldr	r3, [pc, #228]	; (8002370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	015b      	lsls	r3, r3, #5
 8002290:	0d1b      	lsrs	r3, r3, #20
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800229a:	e054      	b.n	8002346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a2:	d050      	beq.n	8002346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022a4:	f7fe fd00 	bl	8000ca8 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d902      	bls.n	80022ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d13d      	bne.n	8002336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022d2:	d111      	bne.n	80022f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022dc:	d004      	beq.n	80022e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e6:	d107      	bne.n	80022f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002300:	d10f      	bne.n	8002322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e017      	b.n	8002366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3b01      	subs	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4013      	ands	r3, r2
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	429a      	cmp	r2, r3
 8002362:	d19b      	bne.n	800229c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000000 	.word	0x20000000

08002374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <SPI_EndRxTxTransaction+0x7c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <SPI_EndRxTxTransaction+0x80>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0d5b      	lsrs	r3, r3, #21
 800238c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800239e:	d112      	bne.n	80023c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff ff5a 	bl	8002264 <SPI_WaitFlagStateUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e00f      	b.n	80023e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d0f2      	beq.n	80023c6 <SPI_EndRxTxTransaction+0x52>
 80023e0:	e000      	b.n	80023e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80023e2:	bf00      	nop
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000000 	.word	0x20000000
 80023f4:	165e9f81 	.word	0x165e9f81

080023f8 <__NVIC_SetPriority>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002450:	2100      	movs	r1, #0
 8002452:	f06f 0004 	mvn.w	r0, #4
 8002456:	f7ff ffcf 	bl	80023f8 <__NVIC_SetPriority>
#endif
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002466:	f3ef 8305 	mrs	r3, IPSR
 800246a:	603b      	str	r3, [r7, #0]
  return(result);
 800246c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002472:	f06f 0305 	mvn.w	r3, #5
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	e00c      	b.n	8002494 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <osKernelInitialize+0x44>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <osKernelInitialize+0x44>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	e002      	b.n	8002494 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002494:	687b      	ldr	r3, [r7, #4]
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000250 	.word	0x20000250

080024a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ae:	f3ef 8305 	mrs	r3, IPSR
 80024b2:	603b      	str	r3, [r7, #0]
  return(result);
 80024b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80024ba:	f06f 0305 	mvn.w	r3, #5
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	e010      	b.n	80024e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <osKernelStart+0x48>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d109      	bne.n	80024de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024ca:	f7ff ffbf 	bl	800244c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <osKernelStart+0x48>)
 80024d0:	2202      	movs	r2, #2
 80024d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024d4:	f001 f866 	bl	80035a4 <vTaskStartScheduler>
      stat = osOK;
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	e002      	b.n	80024e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024e4:	687b      	ldr	r3, [r7, #4]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000250 	.word	0x20000250

080024f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08e      	sub	sp, #56	; 0x38
 80024f8:	af04      	add	r7, sp, #16
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002504:	f3ef 8305 	mrs	r3, IPSR
 8002508:	617b      	str	r3, [r7, #20]
  return(result);
 800250a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800250c:	2b00      	cmp	r3, #0
 800250e:	d17e      	bne.n	800260e <osThreadNew+0x11a>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d07b      	beq.n	800260e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800251a:	2318      	movs	r3, #24
 800251c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d045      	beq.n	80025ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <osThreadNew+0x48>
        name = attr->name;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <osThreadNew+0x6e>
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b38      	cmp	r3, #56	; 0x38
 8002554:	d805      	bhi.n	8002562 <osThreadNew+0x6e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <osThreadNew+0x72>
        return (NULL);
 8002562:	2300      	movs	r3, #0
 8002564:	e054      	b.n	8002610 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00e      	beq.n	800259c <osThreadNew+0xa8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b5b      	cmp	r3, #91	; 0x5b
 8002584:	d90a      	bls.n	800259c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <osThreadNew+0xa8>
        mem = 1;
 8002596:	2301      	movs	r3, #1
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e010      	b.n	80025be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10c      	bne.n	80025be <osThreadNew+0xca>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d108      	bne.n	80025be <osThreadNew+0xca>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <osThreadNew+0xca>
          mem = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e001      	b.n	80025be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d110      	bne.n	80025e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025cc:	9202      	str	r2, [sp, #8]
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6a3a      	ldr	r2, [r7, #32]
 80025d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fe0c 	bl	80031f8 <xTaskCreateStatic>
 80025e0:	4603      	mov	r3, r0
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e013      	b.n	800260e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d110      	bne.n	800260e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fe57 	bl	80032b2 <xTaskCreate>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <osThreadNew+0x11a>
            hTask = NULL;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800260e:	693b      	ldr	r3, [r7, #16]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002620:	f3ef 8305 	mrs	r3, IPSR
 8002624:	60bb      	str	r3, [r7, #8]
  return(result);
 8002626:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <osDelay+0x1c>
    stat = osErrorISR;
 800262c:	f06f 0305 	mvn.w	r3, #5
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e007      	b.n	8002644 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <osDelay+0x2c>
      vTaskDelay(ticks);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 ff7c 	bl	800353c <vTaskDelay>
    }
  }

  return (stat);
 8002644:	68fb      	ldr	r3, [r7, #12]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4a07      	ldr	r2, [pc, #28]	; (800267c <vApplicationGetIdleTaskMemory+0x2c>)
 8002660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <vApplicationGetIdleTaskMemory+0x30>)
 8002666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000254 	.word	0x20000254
 8002680:	200002b0 	.word	0x200002b0

08002684 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002694:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <vApplicationGetTimerTaskMemory+0x30>)
 800269a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a2:	601a      	str	r2, [r3, #0]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	200004b0 	.word	0x200004b0
 80026b4:	2000050c 	.word	0x2000050c

080026b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f103 0208 	add.w	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f103 0208 	add.w	r2, r3, #8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f103 0208 	add.w	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d103      	bne.n	800277a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e00c      	b.n	8002794 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3308      	adds	r3, #8
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e002      	b.n	8002788 <vListInsert+0x2e>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	429a      	cmp	r2, r3
 8002792:	d2f6      	bcs.n	8002782 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	601a      	str	r2, [r3, #0]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6892      	ldr	r2, [r2, #8]
 80027e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6852      	ldr	r2, [r2, #4]
 80027ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d103      	bne.n	8002800 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002846:	bf00      	nop
 8002848:	e7fe      	b.n	8002848 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800284a:	f002 f84b 	bl	80048e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	441a      	add	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	3b01      	subs	r3, #1
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	441a      	add	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	22ff      	movs	r2, #255	; 0xff
 800288e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	22ff      	movs	r2, #255	; 0xff
 8002896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d114      	bne.n	80028ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01a      	beq.n	80028de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3310      	adds	r3, #16
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 f903 	bl	8003ab8 <xTaskRemoveFromEventList>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d012      	beq.n	80028de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <xQueueGenericReset+0xcc>)
 80028ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	e009      	b.n	80028de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3310      	adds	r3, #16
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fef2 	bl	80026b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3324      	adds	r3, #36	; 0x24
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff feed 	bl	80026b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028de:	f002 f831 	bl	8004944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	e000ed04 	.word	0xe000ed04

080028f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002932:	bf00      	nop
 8002934:	e7fe      	b.n	8002934 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <xQueueGenericCreateStatic+0x52>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <xQueueGenericCreateStatic+0x56>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <xQueueGenericCreateStatic+0x58>
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	623b      	str	r3, [r7, #32]
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <xQueueGenericCreateStatic+0x7e>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <xQueueGenericCreateStatic+0x82>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <xQueueGenericCreateStatic+0x84>
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	61fb      	str	r3, [r7, #28]
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800298e:	2350      	movs	r3, #80	; 0x50
 8002990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b50      	cmp	r3, #80	; 0x50
 8002996:	d00a      	beq.n	80029ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	61bb      	str	r3, [r7, #24]
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f805 	bl	80029e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029d8:	4618      	mov	r0, r3
 80029da:	3730      	adds	r7, #48	; 0x30
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e002      	b.n	8002a02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a0e:	2101      	movs	r1, #1
 8002a10:	69b8      	ldr	r0, [r7, #24]
 8002a12:	f7ff ff05 	bl	8002820 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08e      	sub	sp, #56	; 0x38
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <xQueueGenericSend+0x32>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <xQueueGenericSend+0x40>
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <xQueueGenericSend+0x44>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <xQueueGenericSend+0x46>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <xQueueGenericSend+0x60>
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a84:	bf00      	nop
 8002a86:	e7fe      	b.n	8002a86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d103      	bne.n	8002a96 <xQueueGenericSend+0x6e>
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <xQueueGenericSend+0x72>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <xQueueGenericSend+0x74>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	623b      	str	r3, [r7, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	e7fe      	b.n	8002ab4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ab6:	f001 f9bd 	bl	8003e34 <xTaskGetSchedulerState>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <xQueueGenericSend+0x9e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <xQueueGenericSend+0xa2>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <xQueueGenericSend+0xa4>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	61fb      	str	r3, [r7, #28]
}
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ae6:	f001 fefd 	bl	80048e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <xQueueGenericSend+0xd4>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d129      	bne.n	8002b50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b02:	f000 fa0b 	bl	8002f1c <prvCopyDataToQueue>
 8002b06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	3324      	adds	r3, #36	; 0x24
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 ffcf 	bl	8003ab8 <xTaskRemoveFromEventList>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <xQueueGenericSend+0x1f8>)
 8002b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	e00a      	b.n	8002b48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b38:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <xQueueGenericSend+0x1f8>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b48:	f001 fefc 	bl	8004944 <vPortExitCritical>
				return pdPASS;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e063      	b.n	8002c18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b56:	f001 fef5 	bl	8004944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e05c      	b.n	8002c18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d106      	bne.n	8002b72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 f809 	bl	8003b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b72:	f001 fee7 	bl	8004944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b76:	f000 fd7b 	bl	8003670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b7a:	f001 feb3 	bl	80048e4 <vPortEnterCritical>
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d103      	bne.n	8002b94 <xQueueGenericSend+0x16c>
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d103      	bne.n	8002baa <xQueueGenericSend+0x182>
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002baa:	f001 fecb 	bl	8004944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bae:	1d3a      	adds	r2, r7, #4
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fff8 	bl	8003bac <xTaskCheckForTimeOut>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d124      	bne.n	8002c0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bc4:	f000 faa2 	bl	800310c <prvIsQueueFull>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	3310      	adds	r3, #16
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 ff1e 	bl	8003a18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bde:	f000 fa2d 	bl	800303c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002be2:	f000 fd53 	bl	800368c <xTaskResumeAll>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f af7c 	bne.w	8002ae6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <xQueueGenericSend+0x1f8>)
 8002bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	e772      	b.n	8002ae6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c02:	f000 fa1b 	bl	800303c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c06:	f000 fd41 	bl	800368c <xTaskResumeAll>
 8002c0a:	e76c      	b.n	8002ae6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0e:	f000 fa15 	bl	800303c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c12:	f000 fd3b 	bl	800368c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3738      	adds	r7, #56	; 0x38
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b090      	sub	sp, #64	; 0x40
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <xQueueGenericSendFromISR+0x3c>
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xQueueGenericSendFromISR+0x40>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <xQueueGenericSendFromISR+0x42>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d103      	bne.n	8002c8e <xQueueGenericSendFromISR+0x6a>
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <xQueueGenericSendFromISR+0x6e>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <xQueueGenericSendFromISR+0x70>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	623b      	str	r3, [r7, #32]
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cae:	f001 fefb 	bl	8004aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cb2:	f3ef 8211 	mrs	r2, BASEPRI
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	61fa      	str	r2, [r7, #28]
 8002cc8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <xQueueGenericSendFromISR+0xbc>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d12f      	bne.n	8002d40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cf6:	f000 f911 	bl	8002f1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d112      	bne.n	8002d2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	3324      	adds	r3, #36	; 0x24
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fed1 	bl	8003ab8 <xTaskRemoveFromEventList>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e007      	b.n	8002d3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d2e:	3301      	adds	r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d3e:	e001      	b.n	8002d44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3740      	adds	r7, #64	; 0x40
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	; 0x30
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <xQueueReceive+0x30>
	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	623b      	str	r3, [r7, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <xQueueReceive+0x3e>
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <xQueueReceive+0x42>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <xQueueReceive+0x44>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xQueueReceive+0x5e>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	61fb      	str	r3, [r7, #28]
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dba:	f001 f83b 	bl	8003e34 <xTaskGetSchedulerState>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <xQueueReceive+0x6e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <xQueueReceive+0x72>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <xQueueReceive+0x74>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <xQueueReceive+0x8e>
	__asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	61bb      	str	r3, [r7, #24]
}
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dea:	f001 fd7b 	bl	80048e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01f      	beq.n	8002e3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfe:	f000 f8f7 	bl	8002ff0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00f      	beq.n	8002e32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	3310      	adds	r3, #16
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fe4e 	bl	8003ab8 <xTaskRemoveFromEventList>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <xQueueReceive+0x1bc>)
 8002e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e32:	f001 fd87 	bl	8004944 <vPortExitCritical>
				return pdPASS;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e069      	b.n	8002f0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e40:	f001 fd80 	bl	8004944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e062      	b.n	8002f0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e4e:	f107 0310 	add.w	r3, r7, #16
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fe94 	bl	8003b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e5c:	f001 fd72 	bl	8004944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e60:	f000 fc06 	bl	8003670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e64:	f001 fd3e 	bl	80048e4 <vPortEnterCritical>
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d103      	bne.n	8002e7e <xQueueReceive+0x122>
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d103      	bne.n	8002e94 <xQueueReceive+0x138>
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e94:	f001 fd56 	bl	8004944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e98:	1d3a      	adds	r2, r7, #4
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fe83 	bl	8003bac <xTaskCheckForTimeOut>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d123      	bne.n	8002ef4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eae:	f000 f917 	bl	80030e0 <prvIsQueueEmpty>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	3324      	adds	r3, #36	; 0x24
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fda9 	bl	8003a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec8:	f000 f8b8 	bl	800303c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ecc:	f000 fbde 	bl	800368c <xTaskResumeAll>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d189      	bne.n	8002dea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <xQueueReceive+0x1bc>)
 8002ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	e780      	b.n	8002dea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eea:	f000 f8a7 	bl	800303c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eee:	f000 fbcd 	bl	800368c <xTaskResumeAll>
 8002ef2:	e77a      	b.n	8002dea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef6:	f000 f8a1 	bl	800303c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002efa:	f000 fbc7 	bl	800368c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f00:	f000 f8ee 	bl	80030e0 <prvIsQueueEmpty>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f43f af6f 	beq.w	8002dea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3730      	adds	r7, #48	; 0x30
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d14d      	bne.n	8002fde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 ff92 	bl	8003e70 <xTaskPriorityDisinherit>
 8002f4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e043      	b.n	8002fde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d119      	bne.n	8002f90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6858      	ldr	r0, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	461a      	mov	r2, r3
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	f001 ffec 	bl	8004f44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	441a      	add	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d32b      	bcc.n	8002fde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e026      	b.n	8002fde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68d8      	ldr	r0, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	f001 ffd2 	bl	8004f44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	425b      	negs	r3, r3
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d207      	bcs.n	8002fcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d105      	bne.n	8002fde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fe6:	697b      	ldr	r3, [r7, #20]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	441a      	add	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d303      	bcc.n	8003024 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	461a      	mov	r2, r3
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f001 ff88 	bl	8004f44 <memcpy>
	}
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003044:	f001 fc4e 	bl	80048e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003050:	e011      	b.n	8003076 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3324      	adds	r3, #36	; 0x24
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd2a 	bl	8003ab8 <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800306a:	f000 fe01 	bl	8003c70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	3b01      	subs	r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	dce9      	bgt.n	8003052 <prvUnlockQueue+0x16>
 800307e:	e000      	b.n	8003082 <prvUnlockQueue+0x46>
					break;
 8003080:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	22ff      	movs	r2, #255	; 0xff
 8003086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800308a:	f001 fc5b 	bl	8004944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800308e:	f001 fc29 	bl	80048e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003098:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800309a:	e011      	b.n	80030c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d012      	beq.n	80030ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3310      	adds	r3, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fd05 	bl	8003ab8 <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030b4:	f000 fddc 	bl	8003c70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030b8:	7bbb      	ldrb	r3, [r7, #14]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	dce9      	bgt.n	800309c <prvUnlockQueue+0x60>
 80030c8:	e000      	b.n	80030cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030d4:	f001 fc36 	bl	8004944 <vPortExitCritical>
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030e8:	f001 fbfc 	bl	80048e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e001      	b.n	80030fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030fe:	f001 fc21 	bl	8004944 <vPortExitCritical>

	return xReturn;
 8003102:	68fb      	ldr	r3, [r7, #12]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003114:	f001 fbe6 	bl	80048e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	429a      	cmp	r2, r3
 8003122:	d102      	bne.n	800312a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003124:	2301      	movs	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e001      	b.n	800312e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800312e:	f001 fc09 	bl	8004944 <vPortExitCritical>

	return xReturn;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	e014      	b.n	8003176 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800314c:	4a0f      	ldr	r2, [pc, #60]	; (800318c <vQueueAddToRegistry+0x50>)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <vQueueAddToRegistry+0x50>)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <vQueueAddToRegistry+0x50>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800316e:	e006      	b.n	800317e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b07      	cmp	r3, #7
 800317a:	d9e7      	bls.n	800314c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2000090c 	.word	0x2000090c

08003190 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031a0:	f001 fba0 	bl	80048e4 <vPortEnterCritical>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d103      	bne.n	80031ba <vQueueWaitForMessageRestricted+0x2a>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c0:	b25b      	sxtb	r3, r3
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d103      	bne.n	80031d0 <vQueueWaitForMessageRestricted+0x40>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d0:	f001 fbb8 	bl	8004944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fc3b 	bl	8003a60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff26 	bl	800303c <prvUnlockQueue>
	}
 80031f0:	bf00      	nop
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08e      	sub	sp, #56	; 0x38
 80031fc:	af04      	add	r7, sp, #16
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xTaskCreateStatic+0x2a>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	623b      	str	r3, [r7, #32]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <xTaskCreateStatic+0x46>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	61fb      	str	r3, [r7, #28]
}
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800323e:	235c      	movs	r3, #92	; 0x5c
 8003240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b5c      	cmp	r3, #92	; 0x5c
 8003246:	d00a      	beq.n	800325e <xTaskCreateStatic+0x66>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	61bb      	str	r3, [r7, #24]
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800325e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01e      	beq.n	80032a4 <xTaskCreateStatic+0xac>
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003274:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	2202      	movs	r2, #2
 800327a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800327e:	2300      	movs	r3, #0
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	9302      	str	r3, [sp, #8]
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f850 	bl	800333c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800329c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800329e:	f000 f8dd 	bl	800345c <prvAddNewTaskToReadyList>
 80032a2:	e001      	b.n	80032a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032a8:	697b      	ldr	r3, [r7, #20]
	}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b08c      	sub	sp, #48	; 0x30
 80032b6:	af04      	add	r7, sp, #16
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fc2e 	bl	8004b28 <pvPortMalloc>
 80032cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032d4:	205c      	movs	r0, #92	; 0x5c
 80032d6:	f001 fc27 	bl	8004b28 <pvPortMalloc>
 80032da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
 80032e8:	e005      	b.n	80032f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f001 fce8 	bl	8004cc0 <vPortFree>
 80032f0:	e001      	b.n	80032f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d017      	beq.n	800332c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	2300      	movs	r3, #0
 8003308:	9303      	str	r3, [sp, #12]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f80e 	bl	800333c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003320:	69f8      	ldr	r0, [r7, #28]
 8003322:	f000 f89b 	bl	800345c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003326:	2301      	movs	r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e002      	b.n	8003332 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
 8003330:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003332:	69bb      	ldr	r3, [r7, #24]
	}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	461a      	mov	r2, r3
 8003354:	21a5      	movs	r1, #165	; 0xa5
 8003356:	f001 fe03 	bl	8004f60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003364:	3b01      	subs	r3, #1
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <prvInitialiseNewTask+0x58>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	617b      	str	r3, [r7, #20]
}
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01f      	beq.n	80033da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e012      	b.n	80033c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	7819      	ldrb	r1, [r3, #0]
 80033a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	3334      	adds	r3, #52	; 0x34
 80033b0:	460a      	mov	r2, r1
 80033b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	3301      	adds	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d9e9      	bls.n	80033a0 <prvInitialiseNewTask+0x64>
 80033cc:	e000      	b.n	80033d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80033ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d8:	e003      	b.n	80033e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b37      	cmp	r3, #55	; 0x37
 80033e6:	d901      	bls.n	80033ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033e8:	2337      	movs	r3, #55	; 0x37
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	2200      	movs	r2, #0
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	3304      	adds	r3, #4
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f978 	bl	80026f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	3318      	adds	r3, #24
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f973 	bl	80026f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003416:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	69b8      	ldr	r0, [r7, #24]
 800343c:	f001 f928 	bl	8004690 <pxPortInitialiseStack>
 8003440:	4602      	mov	r2, r0
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003450:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003452:	bf00      	nop
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003464:	f001 fa3e 	bl	80048e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <prvAddNewTaskToReadyList+0xc4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <prvAddNewTaskToReadyList+0xc4>)
 8003470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <prvAddNewTaskToReadyList+0xc8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800347a:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <prvAddNewTaskToReadyList+0xc8>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <prvAddNewTaskToReadyList+0xc4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d110      	bne.n	80034aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003488:	f000 fc16 	bl	8003cb8 <prvInitialiseTaskLists>
 800348c:	e00d      	b.n	80034aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800348e:	4b26      	ldr	r3, [pc, #152]	; (8003528 <prvAddNewTaskToReadyList+0xcc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <prvAddNewTaskToReadyList+0xc8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d802      	bhi.n	80034aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034a4:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <prvAddNewTaskToReadyList+0xc8>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <prvAddNewTaskToReadyList+0xd0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3301      	adds	r3, #1
 80034b0:	4a1e      	ldr	r2, [pc, #120]	; (800352c <prvAddNewTaskToReadyList+0xd0>)
 80034b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <prvAddNewTaskToReadyList+0xd0>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <prvAddNewTaskToReadyList+0xd4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d903      	bls.n	80034d0 <prvAddNewTaskToReadyList+0x74>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a18      	ldr	r2, [pc, #96]	; (8003530 <prvAddNewTaskToReadyList+0xd4>)
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <prvAddNewTaskToReadyList+0xd8>)
 80034de:	441a      	add	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f7ff f913 	bl	8002712 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034ec:	f001 fa2a 	bl	8004944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <prvAddNewTaskToReadyList+0xcc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <prvAddNewTaskToReadyList+0xc8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	429a      	cmp	r2, r3
 8003504:	d207      	bcs.n	8003516 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <prvAddNewTaskToReadyList+0xdc>)
 8003508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000e20 	.word	0x20000e20
 8003524:	2000094c 	.word	0x2000094c
 8003528:	20000e2c 	.word	0x20000e2c
 800352c:	20000e3c 	.word	0x20000e3c
 8003530:	20000e28 	.word	0x20000e28
 8003534:	20000950 	.word	0x20000950
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d017      	beq.n	800357e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <vTaskDelay+0x60>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <vTaskDelay+0x30>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60bb      	str	r3, [r7, #8]
}
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800356c:	f000 f880 	bl	8003670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003570:	2100      	movs	r1, #0
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fcea 	bl	8003f4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003578:	f000 f888 	bl	800368c <xTaskResumeAll>
 800357c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <vTaskDelay+0x64>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000e48 	.word	0x20000e48
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035b2:	463a      	mov	r2, r7
 80035b4:	1d39      	adds	r1, r7, #4
 80035b6:	f107 0308 	add.w	r3, r7, #8
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff f848 	bl	8002650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035c0:	6839      	ldr	r1, [r7, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	9202      	str	r2, [sp, #8]
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2300      	movs	r3, #0
 80035d0:	460a      	mov	r2, r1
 80035d2:	4921      	ldr	r1, [pc, #132]	; (8003658 <vTaskStartScheduler+0xb4>)
 80035d4:	4821      	ldr	r0, [pc, #132]	; (800365c <vTaskStartScheduler+0xb8>)
 80035d6:	f7ff fe0f 	bl	80031f8 <xTaskCreateStatic>
 80035da:	4603      	mov	r3, r0
 80035dc:	4a20      	ldr	r2, [pc, #128]	; (8003660 <vTaskStartScheduler+0xbc>)
 80035de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035e0:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <vTaskStartScheduler+0xbc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035e8:	2301      	movs	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e001      	b.n	80035f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035f8:	f000 fcfc 	bl	8003ff4 <xTimerCreateTimerTask>
 80035fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d116      	bne.n	8003632 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	613b      	str	r3, [r7, #16]
}
 8003616:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <vTaskStartScheduler+0xc0>)
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <vTaskStartScheduler+0xc4>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <vTaskStartScheduler+0xc8>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800362c:	f001 f8b8 	bl	80047a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003630:	e00e      	b.n	8003650 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d10a      	bne.n	8003650 <vTaskStartScheduler+0xac>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	60fb      	str	r3, [r7, #12]
}
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <vTaskStartScheduler+0xaa>
}
 8003650:	bf00      	nop
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	08004fa0 	.word	0x08004fa0
 800365c:	08003c89 	.word	0x08003c89
 8003660:	20000e44 	.word	0x20000e44
 8003664:	20000e40 	.word	0x20000e40
 8003668:	20000e2c 	.word	0x20000e2c
 800366c:	20000e24 	.word	0x20000e24

08003670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <vTaskSuspendAll+0x18>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a03      	ldr	r2, [pc, #12]	; (8003688 <vTaskSuspendAll+0x18>)
 800367c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800367e:	bf00      	nop
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	20000e48 	.word	0x20000e48

0800368c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800369a:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <xTaskResumeAll+0x118>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	603b      	str	r3, [r7, #0]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036b8:	f001 f914 	bl	80048e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036bc:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <xTaskResumeAll+0x118>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	4a38      	ldr	r2, [pc, #224]	; (80037a4 <xTaskResumeAll+0x118>)
 80036c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036c6:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <xTaskResumeAll+0x118>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d162      	bne.n	8003794 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036ce:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <xTaskResumeAll+0x11c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d05e      	beq.n	8003794 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036d6:	e02f      	b.n	8003738 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <xTaskResumeAll+0x120>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3318      	adds	r3, #24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f871 	bl	80027cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff f86c 	bl	80027cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <xTaskResumeAll+0x124>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d903      	bls.n	8003708 <xTaskResumeAll+0x7c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a2a      	ldr	r2, [pc, #168]	; (80037b0 <xTaskResumeAll+0x124>)
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <xTaskResumeAll+0x128>)
 8003716:	441a      	add	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7fe fff7 	bl	8002712 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <xTaskResumeAll+0x12c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <xTaskResumeAll+0x130>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <xTaskResumeAll+0x120>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1cb      	bne.n	80036d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003746:	f000 fb55 	bl	8003df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <xTaskResumeAll+0x134>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003756:	f000 f847 	bl	80037e8 <xTaskIncrementTick>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <xTaskResumeAll+0x130>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3b01      	subs	r3, #1
 800376a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f1      	bne.n	8003756 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <xTaskResumeAll+0x134>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <xTaskResumeAll+0x130>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <xTaskResumeAll+0x138>)
 8003786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003794:	f001 f8d6 	bl	8004944 <vPortExitCritical>

	return xAlreadyYielded;
 8003798:	68bb      	ldr	r3, [r7, #8]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000e48 	.word	0x20000e48
 80037a8:	20000e20 	.word	0x20000e20
 80037ac:	20000de0 	.word	0x20000de0
 80037b0:	20000e28 	.word	0x20000e28
 80037b4:	20000950 	.word	0x20000950
 80037b8:	2000094c 	.word	0x2000094c
 80037bc:	20000e34 	.word	0x20000e34
 80037c0:	20000e30 	.word	0x20000e30
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <xTaskGetTickCount+0x1c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037d4:	687b      	ldr	r3, [r7, #4]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000e24 	.word	0x20000e24

080037e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f2:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <xTaskIncrementTick+0x148>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 808f 	bne.w	800391a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037fc:	4b4d      	ldr	r3, [pc, #308]	; (8003934 <xTaskIncrementTick+0x14c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003804:	4a4b      	ldr	r2, [pc, #300]	; (8003934 <xTaskIncrementTick+0x14c>)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d120      	bne.n	8003852 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003810:	4b49      	ldr	r3, [pc, #292]	; (8003938 <xTaskIncrementTick+0x150>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <xTaskIncrementTick+0x48>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	603b      	str	r3, [r7, #0]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xTaskIncrementTick+0x46>
 8003830:	4b41      	ldr	r3, [pc, #260]	; (8003938 <xTaskIncrementTick+0x150>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b41      	ldr	r3, [pc, #260]	; (800393c <xTaskIncrementTick+0x154>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3f      	ldr	r2, [pc, #252]	; (8003938 <xTaskIncrementTick+0x150>)
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4a3f      	ldr	r2, [pc, #252]	; (800393c <xTaskIncrementTick+0x154>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b3e      	ldr	r3, [pc, #248]	; (8003940 <xTaskIncrementTick+0x158>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	4a3d      	ldr	r2, [pc, #244]	; (8003940 <xTaskIncrementTick+0x158>)
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	f000 fad1 	bl	8003df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003852:	4b3c      	ldr	r3, [pc, #240]	; (8003944 <xTaskIncrementTick+0x15c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	429a      	cmp	r2, r3
 800385a:	d349      	bcc.n	80038f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <xTaskIncrementTick+0x150>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003866:	4b37      	ldr	r3, [pc, #220]	; (8003944 <xTaskIncrementTick+0x15c>)
 8003868:	f04f 32ff 	mov.w	r2, #4294967295
 800386c:	601a      	str	r2, [r3, #0]
					break;
 800386e:	e03f      	b.n	80038f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003870:	4b31      	ldr	r3, [pc, #196]	; (8003938 <xTaskIncrementTick+0x150>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d203      	bcs.n	8003890 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003888:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <xTaskIncrementTick+0x15c>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800388e:	e02f      	b.n	80038f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	3304      	adds	r3, #4
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe ff99 	bl	80027cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	3318      	adds	r3, #24
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe ff90 	bl	80027cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <xTaskIncrementTick+0x160>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d903      	bls.n	80038c0 <xTaskIncrementTick+0xd8>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <xTaskIncrementTick+0x160>)
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4a1f      	ldr	r2, [pc, #124]	; (800394c <xTaskIncrementTick+0x164>)
 80038ce:	441a      	add	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f7fe ff1b 	bl	8002712 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <xTaskIncrementTick+0x168>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d3b8      	bcc.n	800385c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038ea:	2301      	movs	r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ee:	e7b5      	b.n	800385c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038f0:	4b17      	ldr	r3, [pc, #92]	; (8003950 <xTaskIncrementTick+0x168>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f6:	4915      	ldr	r1, [pc, #84]	; (800394c <xTaskIncrementTick+0x164>)
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d901      	bls.n	800390c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <xTaskIncrementTick+0x16c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003914:	2301      	movs	r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e004      	b.n	8003924 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <xTaskIncrementTick+0x170>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <xTaskIncrementTick+0x170>)
 8003922:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003924:	697b      	ldr	r3, [r7, #20]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000e48 	.word	0x20000e48
 8003934:	20000e24 	.word	0x20000e24
 8003938:	20000dd8 	.word	0x20000dd8
 800393c:	20000ddc 	.word	0x20000ddc
 8003940:	20000e38 	.word	0x20000e38
 8003944:	20000e40 	.word	0x20000e40
 8003948:	20000e28 	.word	0x20000e28
 800394c:	20000950 	.word	0x20000950
 8003950:	2000094c 	.word	0x2000094c
 8003954:	20000e34 	.word	0x20000e34
 8003958:	20000e30 	.word	0x20000e30

0800395c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003962:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <vTaskSwitchContext+0xa8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <vTaskSwitchContext+0xac>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003970:	e041      	b.n	80039f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003972:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <vTaskSwitchContext+0xac>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <vTaskSwitchContext+0xb0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	e010      	b.n	80039a2 <vTaskSwitchContext+0x46>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <vTaskSwitchContext+0x40>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	607b      	str	r3, [r7, #4]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <vTaskSwitchContext+0x3e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3b01      	subs	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	491b      	ldr	r1, [pc, #108]	; (8003a10 <vTaskSwitchContext+0xb4>)
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0e4      	beq.n	8003980 <vTaskSwitchContext+0x24>
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <vTaskSwitchContext+0xb4>)
 80039c2:	4413      	add	r3, r2
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3308      	adds	r3, #8
 80039d8:	429a      	cmp	r2, r3
 80039da:	d104      	bne.n	80039e6 <vTaskSwitchContext+0x8a>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <vTaskSwitchContext+0xb8>)
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <vTaskSwitchContext+0xb0>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6013      	str	r3, [r2, #0]
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000e48 	.word	0x20000e48
 8003a08:	20000e34 	.word	0x20000e34
 8003a0c:	20000e28 	.word	0x20000e28
 8003a10:	20000950 	.word	0x20000950
 8003a14:	2000094c 	.word	0x2000094c

08003a18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	60fb      	str	r3, [r7, #12]
}
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <vTaskPlaceOnEventList+0x44>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3318      	adds	r3, #24
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe fe87 	bl	800275a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	6838      	ldr	r0, [r7, #0]
 8003a50:	f000 fa7c 	bl	8003f4c <prvAddCurrentTaskToDelayedList>
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	2000094c 	.word	0x2000094c

08003a60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	617b      	str	r3, [r7, #20]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3318      	adds	r3, #24
 8003a8e:	4619      	mov	r1, r3
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7fe fe3e 	bl	8002712 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	68b8      	ldr	r0, [r7, #8]
 8003aa6:	f000 fa51 	bl	8003f4c <prvAddCurrentTaskToDelayedList>
	}
 8003aaa:	bf00      	nop
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	2000094c 	.word	0x2000094c

08003ab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	60fb      	str	r3, [r7, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fe6f 	bl	80027cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <xTaskRemoveFromEventList+0xb0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11d      	bne.n	8003b32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fe66 	bl	80027cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <xTaskRemoveFromEventList+0xb4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d903      	bls.n	8003b14 <xTaskRemoveFromEventList+0x5c>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <xTaskRemoveFromEventList+0xb4>)
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <xTaskRemoveFromEventList+0xb8>)
 8003b22:	441a      	add	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7fe fdf1 	bl	8002712 <vListInsertEnd>
 8003b30:	e005      	b.n	8003b3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	3318      	adds	r3, #24
 8003b36:	4619      	mov	r1, r3
 8003b38:	480e      	ldr	r0, [pc, #56]	; (8003b74 <xTaskRemoveFromEventList+0xbc>)
 8003b3a:	f7fe fdea 	bl	8002712 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <xTaskRemoveFromEventList+0xc0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d905      	bls.n	8003b58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <xTaskRemoveFromEventList+0xc4>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e001      	b.n	8003b5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b5c:	697b      	ldr	r3, [r7, #20]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000e48 	.word	0x20000e48
 8003b6c:	20000e28 	.word	0x20000e28
 8003b70:	20000950 	.word	0x20000950
 8003b74:	20000de0 	.word	0x20000de0
 8003b78:	2000094c 	.word	0x2000094c
 8003b7c:	20000e34 	.word	0x20000e34

08003b80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <vTaskInternalSetTimeOutState+0x24>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <vTaskInternalSetTimeOutState+0x28>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	605a      	str	r2, [r3, #4]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	20000e38 	.word	0x20000e38
 8003ba8:	20000e24 	.word	0x20000e24

08003bac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	613b      	str	r3, [r7, #16]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60fb      	str	r3, [r7, #12]
}
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bee:	f000 fe79 	bl	80048e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <xTaskCheckForTimeOut+0xbc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d102      	bne.n	8003c12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	e023      	b.n	8003c5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <xTaskCheckForTimeOut+0xc0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d007      	beq.n	8003c2e <xTaskCheckForTimeOut+0x82>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	e015      	b.n	8003c5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d20b      	bcs.n	8003c50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff9b 	bl	8003b80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	e004      	b.n	8003c5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c5a:	f000 fe73 	bl	8004944 <vPortExitCritical>

	return xReturn;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000e24 	.word	0x20000e24
 8003c6c:	20000e38 	.word	0x20000e38

08003c70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <vTaskMissedYield+0x14>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	20000e34 	.word	0x20000e34

08003c88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c90:	f000 f852 	bl	8003d38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <prvIdleTask+0x28>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d9f9      	bls.n	8003c90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <prvIdleTask+0x2c>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cac:	e7f0      	b.n	8003c90 <prvIdleTask+0x8>
 8003cae:	bf00      	nop
 8003cb0:	20000950 	.word	0x20000950
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	e00c      	b.n	8003cde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <prvInitialiseTaskLists+0x60>)
 8003cd0:	4413      	add	r3, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fcf0 	bl	80026b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b37      	cmp	r3, #55	; 0x37
 8003ce2:	d9ef      	bls.n	8003cc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ce4:	480d      	ldr	r0, [pc, #52]	; (8003d1c <prvInitialiseTaskLists+0x64>)
 8003ce6:	f7fe fce7 	bl	80026b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cea:	480d      	ldr	r0, [pc, #52]	; (8003d20 <prvInitialiseTaskLists+0x68>)
 8003cec:	f7fe fce4 	bl	80026b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cf0:	480c      	ldr	r0, [pc, #48]	; (8003d24 <prvInitialiseTaskLists+0x6c>)
 8003cf2:	f7fe fce1 	bl	80026b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cf6:	480c      	ldr	r0, [pc, #48]	; (8003d28 <prvInitialiseTaskLists+0x70>)
 8003cf8:	f7fe fcde 	bl	80026b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cfc:	480b      	ldr	r0, [pc, #44]	; (8003d2c <prvInitialiseTaskLists+0x74>)
 8003cfe:	f7fe fcdb 	bl	80026b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <prvInitialiseTaskLists+0x78>)
 8003d04:	4a05      	ldr	r2, [pc, #20]	; (8003d1c <prvInitialiseTaskLists+0x64>)
 8003d06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <prvInitialiseTaskLists+0x7c>)
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <prvInitialiseTaskLists+0x68>)
 8003d0c:	601a      	str	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000950 	.word	0x20000950
 8003d1c:	20000db0 	.word	0x20000db0
 8003d20:	20000dc4 	.word	0x20000dc4
 8003d24:	20000de0 	.word	0x20000de0
 8003d28:	20000df4 	.word	0x20000df4
 8003d2c:	20000e0c 	.word	0x20000e0c
 8003d30:	20000dd8 	.word	0x20000dd8
 8003d34:	20000ddc 	.word	0x20000ddc

08003d38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d3e:	e019      	b.n	8003d74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d40:	f000 fdd0 	bl	80048e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <prvCheckTasksWaitingTermination+0x50>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe fd3b 	bl	80027cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <prvCheckTasksWaitingTermination+0x54>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	4a0b      	ldr	r2, [pc, #44]	; (8003d8c <prvCheckTasksWaitingTermination+0x54>)
 8003d5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <prvCheckTasksWaitingTermination+0x58>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <prvCheckTasksWaitingTermination+0x58>)
 8003d68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d6a:	f000 fdeb 	bl	8004944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f810 	bl	8003d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <prvCheckTasksWaitingTermination+0x58>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e1      	bne.n	8003d40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000df4 	.word	0x20000df4
 8003d8c:	20000e20 	.word	0x20000e20
 8003d90:	20000e08 	.word	0x20000e08

08003d94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 ff88 	bl	8004cc0 <vPortFree>
				vPortFree( pxTCB );
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 ff85 	bl	8004cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003db6:	e018      	b.n	8003dea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d103      	bne.n	8003dca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 ff7c 	bl	8004cc0 <vPortFree>
	}
 8003dc8:	e00f      	b.n	8003dea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d00a      	beq.n	8003dea <prvDeleteTCB+0x56>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	60fb      	str	r3, [r7, #12]
}
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <prvDeleteTCB+0x54>
	}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <prvResetNextTaskUnblockTime+0x38>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <prvResetNextTaskUnblockTime+0x3c>)
 8003e06:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e0c:	e008      	b.n	8003e20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <prvResetNextTaskUnblockTime+0x38>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <prvResetNextTaskUnblockTime+0x3c>)
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000dd8 	.word	0x20000dd8
 8003e30:	20000e40 	.word	0x20000e40

08003e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <xTaskGetSchedulerState+0x34>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e42:	2301      	movs	r3, #1
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	e008      	b.n	8003e5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e48:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <xTaskGetSchedulerState+0x38>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e50:	2302      	movs	r3, #2
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	e001      	b.n	8003e5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e5a:	687b      	ldr	r3, [r7, #4]
	}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	20000e2c 	.word	0x20000e2c
 8003e6c:	20000e48 	.word	0x20000e48

08003e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d056      	beq.n	8003f34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e86:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <xTaskPriorityDisinherit+0xd0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d00a      	beq.n	8003ea6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60fb      	str	r3, [r7, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	60bb      	str	r3, [r7, #8]
}
 8003ec0:	bf00      	nop
 8003ec2:	e7fe      	b.n	8003ec2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	1e5a      	subs	r2, r3, #1
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d02c      	beq.n	8003f34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d128      	bne.n	8003f34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fc70 	bl	80027cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <xTaskPriorityDisinherit+0xd4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d903      	bls.n	8003f14 <xTaskPriorityDisinherit+0xa4>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4a0c      	ldr	r2, [pc, #48]	; (8003f44 <xTaskPriorityDisinherit+0xd4>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <xTaskPriorityDisinherit+0xd8>)
 8003f22:	441a      	add	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f7fe fbf1 	bl	8002712 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f34:	697b      	ldr	r3, [r7, #20]
	}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000094c 	.word	0x2000094c
 8003f44:	20000e28 	.word	0x20000e28
 8003f48:	20000950 	.word	0x20000950

08003f4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f56:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <prvAddCurrentTaskToDelayedList+0x90>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fc32 	bl	80027cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d10a      	bne.n	8003f86 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f76:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4819      	ldr	r0, [pc, #100]	; (8003fe4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f80:	f7fe fbc7 	bl	8002712 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f84:	e026      	b.n	8003fd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f8e:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d209      	bcs.n	8003fb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f7fe fbd5 	bl	800275a <vListInsert>
}
 8003fb0:	e010      	b.n	8003fd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7fe fbcb 	bl	800275a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d202      	bcs.n	8003fd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fce:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20000e24 	.word	0x20000e24
 8003fe0:	2000094c 	.word	0x2000094c
 8003fe4:	20000e0c 	.word	0x20000e0c
 8003fe8:	20000ddc 	.word	0x20000ddc
 8003fec:	20000dd8 	.word	0x20000dd8
 8003ff0:	20000e40 	.word	0x20000e40

08003ff4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	; 0x28
 8003ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ffe:	f000 fb07 	bl	8004610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004002:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <xTimerCreateTimerTask+0x80>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d021      	beq.n	800404e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004012:	1d3a      	adds	r2, r7, #4
 8004014:	f107 0108 	add.w	r1, r7, #8
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe fb31 	bl	8002684 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	9202      	str	r2, [sp, #8]
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2302      	movs	r3, #2
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	460a      	mov	r2, r1
 8004034:	4910      	ldr	r1, [pc, #64]	; (8004078 <xTimerCreateTimerTask+0x84>)
 8004036:	4811      	ldr	r0, [pc, #68]	; (800407c <xTimerCreateTimerTask+0x88>)
 8004038:	f7ff f8de 	bl	80031f8 <xTaskCreateStatic>
 800403c:	4603      	mov	r3, r0
 800403e:	4a10      	ldr	r2, [pc, #64]	; (8004080 <xTimerCreateTimerTask+0x8c>)
 8004040:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <xTimerCreateTimerTask+0x8c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800404a:	2301      	movs	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	613b      	str	r3, [r7, #16]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800406a:	697b      	ldr	r3, [r7, #20]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000e7c 	.word	0x20000e7c
 8004078:	08004fa8 	.word	0x08004fa8
 800407c:	080041b9 	.word	0x080041b9
 8004080:	20000e80 	.word	0x20000e80

08004084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	623b      	str	r3, [r7, #32]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040b2:	4b1a      	ldr	r3, [pc, #104]	; (800411c <xTimerGenericCommand+0x98>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d02a      	beq.n	8004110 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	dc18      	bgt.n	80040fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040cc:	f7ff feb2 	bl	8003e34 <xTaskGetSchedulerState>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d109      	bne.n	80040ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <xTimerGenericCommand+0x98>)
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	f107 0110 	add.w	r1, r7, #16
 80040de:	2300      	movs	r3, #0
 80040e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e2:	f7fe fca1 	bl	8002a28 <xQueueGenericSend>
 80040e6:	6278      	str	r0, [r7, #36]	; 0x24
 80040e8:	e012      	b.n	8004110 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <xTimerGenericCommand+0x98>)
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f107 0110 	add.w	r1, r7, #16
 80040f2:	2300      	movs	r3, #0
 80040f4:	2200      	movs	r2, #0
 80040f6:	f7fe fc97 	bl	8002a28 <xQueueGenericSend>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24
 80040fc:	e008      	b.n	8004110 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <xTimerGenericCommand+0x98>)
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	f107 0110 	add.w	r1, r7, #16
 8004106:	2300      	movs	r3, #0
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	f7fe fd8b 	bl	8002c24 <xQueueGenericSendFromISR>
 800410e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004112:	4618      	mov	r0, r3
 8004114:	3728      	adds	r7, #40	; 0x28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000e7c 	.word	0x20000e7c

08004120 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <prvProcessExpiredTimer+0x94>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3304      	adds	r3, #4
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fb47 	bl	80027cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d022      	beq.n	8004192 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	18d1      	adds	r1, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	6978      	ldr	r0, [r7, #20]
 800415a:	f000 f8d1 	bl	8004300 <prvInsertTimerInActiveList>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01f      	beq.n	80041a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004164:	2300      	movs	r3, #0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2300      	movs	r3, #0
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	2100      	movs	r1, #0
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f7ff ff88 	bl	8004084 <xTimerGenericCommand>
 8004174:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d113      	bne.n	80041a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	b2da      	uxtb	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	6978      	ldr	r0, [r7, #20]
 80041aa:	4798      	blx	r3
}
 80041ac:	bf00      	nop
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000e74 	.word	0x20000e74

080041b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041c0:	f107 0308 	add.w	r3, r7, #8
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f857 	bl	8004278 <prvGetNextExpireTime>
 80041ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4619      	mov	r1, r3
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f803 	bl	80041dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041d6:	f000 f8d5 	bl	8004384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041da:	e7f1      	b.n	80041c0 <prvTimerTask+0x8>

080041dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041e6:	f7ff fa43 	bl	8003670 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f866 	bl	80042c0 <prvSampleTimeNow>
 80041f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d130      	bne.n	800425e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <prvProcessTimerOrBlockTask+0x3c>
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	429a      	cmp	r2, r3
 8004208:	d806      	bhi.n	8004218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800420a:	f7ff fa3f 	bl	800368c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff85 	bl	8004120 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004216:	e024      	b.n	8004262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <prvProcessTimerOrBlockTask+0x90>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <prvProcessTimerOrBlockTask+0x50>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <prvProcessTimerOrBlockTask+0x52>
 800422c:	2300      	movs	r3, #0
 800422e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <prvProcessTimerOrBlockTask+0x94>)
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	4619      	mov	r1, r3
 800423e:	f7fe ffa7 	bl	8003190 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004242:	f7ff fa23 	bl	800368c <xTaskResumeAll>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <prvProcessTimerOrBlockTask+0x98>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	f3bf 8f6f 	isb	sy
}
 800425c:	e001      	b.n	8004262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800425e:	f7ff fa15 	bl	800368c <xTaskResumeAll>
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000e78 	.word	0x20000e78
 8004270:	20000e7c 	.word	0x20000e7c
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004280:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <prvGetNextExpireTime+0x44>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <prvGetNextExpireTime+0x16>
 800428a:	2201      	movs	r2, #1
 800428c:	e000      	b.n	8004290 <prvGetNextExpireTime+0x18>
 800428e:	2200      	movs	r2, #0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <prvGetNextExpireTime+0x44>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e001      	b.n	80042ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042ac:	68fb      	ldr	r3, [r7, #12]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000e74 	.word	0x20000e74

080042c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042c8:	f7ff fa7e 	bl	80037c8 <xTaskGetTickCount>
 80042cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <prvSampleTimeNow+0x3c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d205      	bcs.n	80042e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042d8:	f000 f936 	bl	8004548 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e002      	b.n	80042ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042ea:	4a04      	ldr	r2, [pc, #16]	; (80042fc <prvSampleTimeNow+0x3c>)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042f0:	68fb      	ldr	r3, [r7, #12]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000e84 	.word	0x20000e84

08004300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d812      	bhi.n	800434c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e01b      	b.n	8004372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <prvInsertTimerInActiveList+0x7c>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f7fe fa08 	bl	800275a <vListInsert>
 800434a:	e012      	b.n	8004372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d206      	bcs.n	8004362 <prvInsertTimerInActiveList+0x62>
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e007      	b.n	8004372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <prvInsertTimerInActiveList+0x80>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7fe f9f4 	bl	800275a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004372:	697b      	ldr	r3, [r7, #20]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000e78 	.word	0x20000e78
 8004380:	20000e74 	.word	0x20000e74

08004384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08e      	sub	sp, #56	; 0x38
 8004388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800438a:	e0ca      	b.n	8004522 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	da18      	bge.n	80043c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004392:	1d3b      	adds	r3, r7, #4
 8004394:	3304      	adds	r3, #4
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	61fb      	str	r3, [r7, #28]
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ba:	6850      	ldr	r0, [r2, #4]
 80043bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	4611      	mov	r1, r2
 80043c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f2c0 80aa 	blt.w	8004520 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	3304      	adds	r3, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe f9f5 	bl	80027cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043e2:	463b      	mov	r3, r7
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff6b 	bl	80042c0 <prvSampleTimeNow>
 80043ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	f200 8097 	bhi.w	8004522 <prvProcessReceivedCommands+0x19e>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <prvProcessReceivedCommands+0x78>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	08004425 	.word	0x08004425
 8004400:	08004425 	.word	0x08004425
 8004404:	08004425 	.word	0x08004425
 8004408:	08004499 	.word	0x08004499
 800440c:	080044ad 	.word	0x080044ad
 8004410:	080044f7 	.word	0x080044f7
 8004414:	08004425 	.word	0x08004425
 8004418:	08004425 	.word	0x08004425
 800441c:	08004499 	.word	0x08004499
 8004420:	080044ad 	.word	0x080044ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	b2da      	uxtb	r2, r3
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	18d1      	adds	r1, r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004444:	f7ff ff5c 	bl	8004300 <prvInsertTimerInActiveList>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d069      	beq.n	8004522 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004454:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05e      	beq.n	8004522 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	441a      	add	r2, r3
 800446c:	2300      	movs	r3, #0
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2300      	movs	r3, #0
 8004472:	2100      	movs	r1, #0
 8004474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004476:	f7ff fe05 	bl	8004084 <xTimerGenericCommand>
 800447a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d14f      	bne.n	8004522 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	61bb      	str	r3, [r7, #24]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80044aa:	e03a      	b.n	8004522 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	617b      	str	r3, [r7, #20]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	18d1      	adds	r1, r2, r3
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f0:	f7ff ff06 	bl	8004300 <prvInsertTimerInActiveList>
					break;
 80044f4:	e015      	b.n	8004522 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d103      	bne.n	800450c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004506:	f000 fbdb 	bl	8004cc0 <vPortFree>
 800450a:	e00a      	b.n	8004522 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	b2da      	uxtb	r2, r3
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800451e:	e000      	b.n	8004522 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004520:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <prvProcessReceivedCommands+0x1c0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	1d39      	adds	r1, r7, #4
 8004528:	2200      	movs	r2, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fc16 	bl	8002d5c <xQueueReceive>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	f47f af2a 	bne.w	800438c <prvProcessReceivedCommands+0x8>
	}
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3730      	adds	r7, #48	; 0x30
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000e7c 	.word	0x20000e7c

08004548 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800454e:	e048      	b.n	80045e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004550:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <prvSwitchTimerLists+0xc0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800455a:	4b2b      	ldr	r3, [pc, #172]	; (8004608 <prvSwitchTimerLists+0xc0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3304      	adds	r3, #4
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe f92f 	bl	80027cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02e      	beq.n	80045e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	429a      	cmp	r2, r3
 8004594:	d90e      	bls.n	80045b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <prvSwitchTimerLists+0xc0>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fe f8d4 	bl	800275a <vListInsert>
 80045b2:	e016      	b.n	80045e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045b4:	2300      	movs	r3, #0
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2300      	movs	r3, #0
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	2100      	movs	r1, #0
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fd60 	bl	8004084 <xTimerGenericCommand>
 80045c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	603b      	str	r3, [r7, #0]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <prvSwitchTimerLists+0xc0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1b1      	bne.n	8004550 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <prvSwitchTimerLists+0xc0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <prvSwitchTimerLists+0xc4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a04      	ldr	r2, [pc, #16]	; (8004608 <prvSwitchTimerLists+0xc0>)
 80045f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045fa:	4a04      	ldr	r2, [pc, #16]	; (800460c <prvSwitchTimerLists+0xc4>)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6013      	str	r3, [r2, #0]
}
 8004600:	bf00      	nop
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000e74 	.word	0x20000e74
 800460c:	20000e78 	.word	0x20000e78

08004610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004616:	f000 f965 	bl	80048e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800461a:	4b15      	ldr	r3, [pc, #84]	; (8004670 <prvCheckForValidListAndQueue+0x60>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d120      	bne.n	8004664 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004622:	4814      	ldr	r0, [pc, #80]	; (8004674 <prvCheckForValidListAndQueue+0x64>)
 8004624:	f7fe f848 	bl	80026b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004628:	4813      	ldr	r0, [pc, #76]	; (8004678 <prvCheckForValidListAndQueue+0x68>)
 800462a:	f7fe f845 	bl	80026b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <prvCheckForValidListAndQueue+0x6c>)
 8004630:	4a10      	ldr	r2, [pc, #64]	; (8004674 <prvCheckForValidListAndQueue+0x64>)
 8004632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <prvCheckForValidListAndQueue+0x70>)
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <prvCheckForValidListAndQueue+0x68>)
 8004638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800463a:	2300      	movs	r3, #0
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <prvCheckForValidListAndQueue+0x74>)
 8004640:	4a11      	ldr	r2, [pc, #68]	; (8004688 <prvCheckForValidListAndQueue+0x78>)
 8004642:	2110      	movs	r1, #16
 8004644:	200a      	movs	r0, #10
 8004646:	f7fe f953 	bl	80028f0 <xQueueGenericCreateStatic>
 800464a:	4603      	mov	r3, r0
 800464c:	4a08      	ldr	r2, [pc, #32]	; (8004670 <prvCheckForValidListAndQueue+0x60>)
 800464e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <prvCheckForValidListAndQueue+0x60>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <prvCheckForValidListAndQueue+0x60>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	490b      	ldr	r1, [pc, #44]	; (800468c <prvCheckForValidListAndQueue+0x7c>)
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fd6c 	bl	800313c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004664:	f000 f96e 	bl	8004944 <vPortExitCritical>
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000e7c 	.word	0x20000e7c
 8004674:	20000e4c 	.word	0x20000e4c
 8004678:	20000e60 	.word	0x20000e60
 800467c:	20000e74 	.word	0x20000e74
 8004680:	20000e78 	.word	0x20000e78
 8004684:	20000f28 	.word	0x20000f28
 8004688:	20000e88 	.word	0x20000e88
 800468c:	08004fb0 	.word	0x08004fb0

08004690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b04      	subs	r3, #4
 80046a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3b04      	subs	r3, #4
 80046be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046c0:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <pxPortInitialiseStack+0x64>)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3b14      	subs	r3, #20
 80046ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b04      	subs	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f06f 0202 	mvn.w	r2, #2
 80046de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3b20      	subs	r3, #32
 80046e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	080046f9 	.word	0x080046f9

080046f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <prvTaskExitError+0x54>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d00a      	beq.n	8004722 <prvTaskExitError+0x2a>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60fb      	str	r3, [r7, #12]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <prvTaskExitError+0x28>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60bb      	str	r3, [r7, #8]
}
 8004734:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004736:	bf00      	nop
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0fc      	beq.n	8004738 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	2000000c 	.word	0x2000000c

08004750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <pxCurrentTCBConst2>)
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	6808      	ldr	r0, [r1, #0]
 8004756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475a:	f380 8809 	msr	PSP, r0
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8811 	msr	BASEPRI, r0
 800476a:	4770      	bx	lr
 800476c:	f3af 8000 	nop.w

08004770 <pxCurrentTCBConst2>:
 8004770:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop

08004778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004778:	4808      	ldr	r0, [pc, #32]	; (800479c <prvPortStartFirstTask+0x24>)
 800477a:	6800      	ldr	r0, [r0, #0]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f380 8808 	msr	MSP, r0
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8814 	msr	CONTROL, r0
 800478a:	b662      	cpsie	i
 800478c:	b661      	cpsie	f
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	df00      	svc	0
 8004798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800479a:	bf00      	nop
 800479c:	e000ed08 	.word	0xe000ed08

080047a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047a6:	4b46      	ldr	r3, [pc, #280]	; (80048c0 <xPortStartScheduler+0x120>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a46      	ldr	r2, [pc, #280]	; (80048c4 <xPortStartScheduler+0x124>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10a      	bne.n	80047c6 <xPortStartScheduler+0x26>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047c6:	4b3e      	ldr	r3, [pc, #248]	; (80048c0 <xPortStartScheduler+0x120>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a3f      	ldr	r2, [pc, #252]	; (80048c8 <xPortStartScheduler+0x128>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10a      	bne.n	80047e6 <xPortStartScheduler+0x46>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047e6:	4b39      	ldr	r3, [pc, #228]	; (80048cc <xPortStartScheduler+0x12c>)
 80047e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	22ff      	movs	r2, #255	; 0xff
 80047f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <xPortStartScheduler+0x130>)
 800480c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800480e:	4b31      	ldr	r3, [pc, #196]	; (80048d4 <xPortStartScheduler+0x134>)
 8004810:	2207      	movs	r2, #7
 8004812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004814:	e009      	b.n	800482a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004816:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <xPortStartScheduler+0x134>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3b01      	subs	r3, #1
 800481c:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <xPortStartScheduler+0x134>)
 800481e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	b2db      	uxtb	r3, r3
 8004828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d0ef      	beq.n	8004816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004836:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <xPortStartScheduler+0x134>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f1c3 0307 	rsb	r3, r3, #7
 800483e:	2b04      	cmp	r3, #4
 8004840:	d00a      	beq.n	8004858 <xPortStartScheduler+0xb8>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60bb      	str	r3, [r7, #8]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <xPortStartScheduler+0x134>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <xPortStartScheduler+0x134>)
 8004860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <xPortStartScheduler+0x134>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800486a:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <xPortStartScheduler+0x134>)
 800486c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004876:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <xPortStartScheduler+0x138>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a17      	ldr	r2, [pc, #92]	; (80048d8 <xPortStartScheduler+0x138>)
 800487c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <xPortStartScheduler+0x138>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <xPortStartScheduler+0x138>)
 8004888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800488c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800488e:	f000 f8dd 	bl	8004a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <xPortStartScheduler+0x13c>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004898:	f000 f8fc 	bl	8004a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800489c:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <xPortStartScheduler+0x140>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0f      	ldr	r2, [pc, #60]	; (80048e0 <xPortStartScheduler+0x140>)
 80048a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048a8:	f7ff ff66 	bl	8004778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048ac:	f7ff f856 	bl	800395c <vTaskSwitchContext>
	prvTaskExitError();
 80048b0:	f7ff ff22 	bl	80046f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	e000ed00 	.word	0xe000ed00
 80048c4:	410fc271 	.word	0x410fc271
 80048c8:	410fc270 	.word	0x410fc270
 80048cc:	e000e400 	.word	0xe000e400
 80048d0:	20000f78 	.word	0x20000f78
 80048d4:	20000f7c 	.word	0x20000f7c
 80048d8:	e000ed20 	.word	0xe000ed20
 80048dc:	2000000c 	.word	0x2000000c
 80048e0:	e000ef34 	.word	0xe000ef34

080048e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	607b      	str	r3, [r7, #4]
}
 80048fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <vPortEnterCritical+0x58>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	4a0d      	ldr	r2, [pc, #52]	; (800493c <vPortEnterCritical+0x58>)
 8004906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <vPortEnterCritical+0x58>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10f      	bne.n	8004930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <vPortEnterCritical+0x5c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <vPortEnterCritical+0x4c>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	603b      	str	r3, [r7, #0]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <vPortEnterCritical+0x4a>
	}
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	2000000c 	.word	0x2000000c
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <vPortExitCritical+0x50>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <vPortExitCritical+0x24>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	607b      	str	r3, [r7, #4]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <vPortExitCritical+0x50>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3b01      	subs	r3, #1
 800496e:	4a09      	ldr	r2, [pc, #36]	; (8004994 <vPortExitCritical+0x50>)
 8004970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <vPortExitCritical+0x50>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <vPortExitCritical+0x42>
 800497a:	2300      	movs	r3, #0
 800497c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	f383 8811 	msr	BASEPRI, r3
}
 8004984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000000c 	.word	0x2000000c
	...

080049a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049a0:	f3ef 8009 	mrs	r0, PSP
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <pxCurrentTCBConst>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	f01e 0f10 	tst.w	lr, #16
 80049b0:	bf08      	it	eq
 80049b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ba:	6010      	str	r0, [r2, #0]
 80049bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049c4:	f380 8811 	msr	BASEPRI, r0
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f7fe ffc4 	bl	800395c <vTaskSwitchContext>
 80049d4:	f04f 0000 	mov.w	r0, #0
 80049d8:	f380 8811 	msr	BASEPRI, r0
 80049dc:	bc09      	pop	{r0, r3}
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	6808      	ldr	r0, [r1, #0]
 80049e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e6:	f01e 0f10 	tst.w	lr, #16
 80049ea:	bf08      	it	eq
 80049ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049f0:	f380 8809 	msr	PSP, r0
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	f3af 8000 	nop.w

08004a00 <pxCurrentTCBConst>:
 8004a00:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop

08004a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	607b      	str	r3, [r7, #4]
}
 8004a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a22:	f7fe fee1 	bl	80037e8 <xTaskIncrementTick>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <xPortSysTickHandler+0x40>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f383 8811 	msr	BASEPRI, r3
}
 8004a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <vPortSetupTimerInterrupt+0x34>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a56:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <vPortSetupTimerInterrupt+0x38>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <vPortSetupTimerInterrupt+0x3c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <vPortSetupTimerInterrupt+0x40>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <vPortSetupTimerInterrupt+0x44>)
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <vPortSetupTimerInterrupt+0x34>)
 8004a70:	2207      	movs	r2, #7
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000e010 	.word	0xe000e010
 8004a84:	e000e018 	.word	0xe000e018
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	10624dd3 	.word	0x10624dd3
 8004a90:	e000e014 	.word	0xe000e014

08004a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004aa4 <vPortEnableVFP+0x10>
 8004a98:	6801      	ldr	r1, [r0, #0]
 8004a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a9e:	6001      	str	r1, [r0, #0]
 8004aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004aa2:	bf00      	nop
 8004aa4:	e000ed88 	.word	0xe000ed88

08004aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004aae:	f3ef 8305 	mrs	r3, IPSR
 8004ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b0f      	cmp	r3, #15
 8004ab8:	d914      	bls.n	8004ae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aba:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <vPortValidateInterruptPriority+0x70>)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ac4:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <vPortValidateInterruptPriority+0x74>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	7afa      	ldrb	r2, [r7, #11]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d20a      	bcs.n	8004ae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	607b      	str	r3, [r7, #4]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <vPortValidateInterruptPriority+0x78>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <vPortValidateInterruptPriority+0x7c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d90a      	bls.n	8004b0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	603b      	str	r3, [r7, #0]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <vPortValidateInterruptPriority+0x60>
	}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	e000e3f0 	.word	0xe000e3f0
 8004b1c:	20000f78 	.word	0x20000f78
 8004b20:	e000ed0c 	.word	0xe000ed0c
 8004b24:	20000f7c 	.word	0x20000f7c

08004b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b34:	f7fe fd9c 	bl	8003670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b38:	4b5b      	ldr	r3, [pc, #364]	; (8004ca8 <pvPortMalloc+0x180>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b40:	f000 f920 	bl	8004d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b44:	4b59      	ldr	r3, [pc, #356]	; (8004cac <pvPortMalloc+0x184>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f040 8093 	bne.w	8004c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01d      	beq.n	8004b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b58:	2208      	movs	r2, #8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d014      	beq.n	8004b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f023 0307 	bic.w	r3, r3, #7
 8004b70:	3308      	adds	r3, #8
 8004b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <pvPortMalloc+0x6c>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	617b      	str	r3, [r7, #20]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d06e      	beq.n	8004c78 <pvPortMalloc+0x150>
 8004b9a:	4b45      	ldr	r3, [pc, #276]	; (8004cb0 <pvPortMalloc+0x188>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d869      	bhi.n	8004c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ba4:	4b43      	ldr	r3, [pc, #268]	; (8004cb4 <pvPortMalloc+0x18c>)
 8004ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ba8:	4b42      	ldr	r3, [pc, #264]	; (8004cb4 <pvPortMalloc+0x18c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bae:	e004      	b.n	8004bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d903      	bls.n	8004bcc <pvPortMalloc+0xa4>
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f1      	bne.n	8004bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bcc:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <pvPortMalloc+0x180>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d050      	beq.n	8004c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2208      	movs	r2, #8
 8004bdc:	4413      	add	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	1ad2      	subs	r2, r2, r3
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d91f      	bls.n	8004c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <pvPortMalloc+0xf8>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	613b      	str	r3, [r7, #16]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c32:	69b8      	ldr	r0, [r7, #24]
 8004c34:	f000 f908 	bl	8004e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <pvPortMalloc+0x188>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <pvPortMalloc+0x188>)
 8004c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c46:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <pvPortMalloc+0x188>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <pvPortMalloc+0x190>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d203      	bcs.n	8004c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c52:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <pvPortMalloc+0x188>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <pvPortMalloc+0x190>)
 8004c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <pvPortMalloc+0x184>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c6e:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <pvPortMalloc+0x194>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <pvPortMalloc+0x194>)
 8004c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c78:	f7fe fd08 	bl	800368c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <pvPortMalloc+0x174>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	60fb      	str	r3, [r7, #12]
}
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <pvPortMalloc+0x172>
	return pvReturn;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3728      	adds	r7, #40	; 0x28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20004b88 	.word	0x20004b88
 8004cac:	20004b9c 	.word	0x20004b9c
 8004cb0:	20004b8c 	.word	0x20004b8c
 8004cb4:	20004b80 	.word	0x20004b80
 8004cb8:	20004b90 	.word	0x20004b90
 8004cbc:	20004b94 	.word	0x20004b94

08004cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d04d      	beq.n	8004d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	425b      	negs	r3, r3
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <vPortFree+0xb8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <vPortFree+0x44>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	60fb      	str	r3, [r7, #12]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <vPortFree+0x62>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	60bb      	str	r3, [r7, #8]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <vPortFree+0xb8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01e      	beq.n	8004d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11a      	bne.n	8004d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <vPortFree+0xb8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	401a      	ands	r2, r3
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d48:	f7fe fc92 	bl	8003670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <vPortFree+0xbc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4413      	add	r3, r2
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <vPortFree+0xbc>)
 8004d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d5a:	6938      	ldr	r0, [r7, #16]
 8004d5c:	f000 f874 	bl	8004e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <vPortFree+0xc0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	4a06      	ldr	r2, [pc, #24]	; (8004d80 <vPortFree+0xc0>)
 8004d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d6a:	f7fe fc8f 	bl	800368c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20004b9c 	.word	0x20004b9c
 8004d7c:	20004b8c 	.word	0x20004b8c
 8004d80:	20004b98 	.word	0x20004b98

08004d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <prvHeapInit+0xac>)
 8004d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00c      	beq.n	8004db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3307      	adds	r3, #7
 8004da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0307 	bic.w	r3, r3, #7
 8004daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <prvHeapInit+0xac>)
 8004db4:	4413      	add	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dbc:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <prvHeapInit+0xb0>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004dc2:	4b1c      	ldr	r3, [pc, #112]	; (8004e34 <prvHeapInit+0xb0>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0307 	bic.w	r3, r3, #7
 8004dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <prvHeapInit+0xb4>)
 8004de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004de6:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <prvHeapInit+0xb4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <prvHeapInit+0xb4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <prvHeapInit+0xb4>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <prvHeapInit+0xb8>)
 8004e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <prvHeapInit+0xbc>)
 8004e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <prvHeapInit+0xc0>)
 8004e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e22:	601a      	str	r2, [r3, #0]
}
 8004e24:	bf00      	nop
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	20000f80 	.word	0x20000f80
 8004e34:	20004b80 	.word	0x20004b80
 8004e38:	20004b88 	.word	0x20004b88
 8004e3c:	20004b90 	.word	0x20004b90
 8004e40:	20004b8c 	.word	0x20004b8c
 8004e44:	20004b9c 	.word	0x20004b9c

08004e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e50:	4b28      	ldr	r3, [pc, #160]	; (8004ef4 <prvInsertBlockIntoFreeList+0xac>)
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e002      	b.n	8004e5c <prvInsertBlockIntoFreeList+0x14>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d8f7      	bhi.n	8004e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	4413      	add	r3, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d108      	bne.n	8004e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	441a      	add	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	441a      	add	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d118      	bne.n	8004ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d00d      	beq.n	8004ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e008      	b.n	8004ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ec6:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e003      	b.n	8004ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d002      	beq.n	8004ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20004b80 	.word	0x20004b80
 8004ef8:	20004b88 	.word	0x20004b88

08004efc <__libc_init_array>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	4d0d      	ldr	r5, [pc, #52]	; (8004f34 <__libc_init_array+0x38>)
 8004f00:	4c0d      	ldr	r4, [pc, #52]	; (8004f38 <__libc_init_array+0x3c>)
 8004f02:	1b64      	subs	r4, r4, r5
 8004f04:	10a4      	asrs	r4, r4, #2
 8004f06:	2600      	movs	r6, #0
 8004f08:	42a6      	cmp	r6, r4
 8004f0a:	d109      	bne.n	8004f20 <__libc_init_array+0x24>
 8004f0c:	4d0b      	ldr	r5, [pc, #44]	; (8004f3c <__libc_init_array+0x40>)
 8004f0e:	4c0c      	ldr	r4, [pc, #48]	; (8004f40 <__libc_init_array+0x44>)
 8004f10:	f000 f82e 	bl	8004f70 <_init>
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	2600      	movs	r6, #0
 8004f1a:	42a6      	cmp	r6, r4
 8004f1c:	d105      	bne.n	8004f2a <__libc_init_array+0x2e>
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f24:	4798      	blx	r3
 8004f26:	3601      	adds	r6, #1
 8004f28:	e7ee      	b.n	8004f08 <__libc_init_array+0xc>
 8004f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2e:	4798      	blx	r3
 8004f30:	3601      	adds	r6, #1
 8004f32:	e7f2      	b.n	8004f1a <__libc_init_array+0x1e>
 8004f34:	08005018 	.word	0x08005018
 8004f38:	08005018 	.word	0x08005018
 8004f3c:	08005018 	.word	0x08005018
 8004f40:	0800501c 	.word	0x0800501c

08004f44 <memcpy>:
 8004f44:	440a      	add	r2, r1
 8004f46:	4291      	cmp	r1, r2
 8004f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f4c:	d100      	bne.n	8004f50 <memcpy+0xc>
 8004f4e:	4770      	bx	lr
 8004f50:	b510      	push	{r4, lr}
 8004f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f5a:	4291      	cmp	r1, r2
 8004f5c:	d1f9      	bne.n	8004f52 <memcpy+0xe>
 8004f5e:	bd10      	pop	{r4, pc}

08004f60 <memset>:
 8004f60:	4402      	add	r2, r0
 8004f62:	4603      	mov	r3, r0
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d100      	bne.n	8004f6a <memset+0xa>
 8004f68:	4770      	bx	lr
 8004f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f6e:	e7f9      	b.n	8004f64 <memset+0x4>

08004f70 <_init>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr

08004f7c <_fini>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr
